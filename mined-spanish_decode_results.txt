------------------------------------------------------------
number and example_id: 
0-15080500

original snippet: 
os.kill(os.getpid(), signal.SIGUSR1)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id urllib))) (identifier-attr request))) (identifier-attr urlopen))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
urllib.request.urlopen('signal.SIGUSR1')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
1-3283984

original snippet: 
bytes.fromhex('4a4b4c').decode('utf-8')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id str_0))) (identifier-attr decode))) (expr*-args (Str (string-s utf-8)) (Str (string-s ignore))) (keyword*-keywords))))))
predicted code: 
4a4b4c.decode('utf-8', 'ignore')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
2-3844801

original snippet: 
all(x == myList[0] for x in myList)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Compare (expr-left (Call (expr-func (Name (identifier-id len))) (expr*-args (Call (expr-func (Name (identifier-id set))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (keyword*-keywords))) (cmpop*-ops (Eq)) (expr*-comparators (Num (object-n 1))))))))
predicted code: 
len(set(myList)) == 1
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
3-4302166

original snippet: 
print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Str (string-s -SPACE-))) (identifier-attr join))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id str))) (expr*-args (Name (identifier-id i))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Call (expr-func (Name (identifier-id range))) (expr*-args (Num (object-n 10))) (keyword*-keywords))) (expr*-ifs))))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(' '.join(str(i) for i in range(10)))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
4-2544710

original snippet: 
res = {k: v for k, v in list(kwargs.items()) if v is not None}
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sum))) (expr*-args (GeneratorExp (expr-elt (Tuple (expr*-elts (Name (identifier-id k)) (Name (identifier-id v))))) (comprehension*-generators (comprehension (expr-target (Tuple (expr*-elts (Name (identifier-id k)) (Name (identifier-id v))))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr items))) (expr*-args) (keyword*-keywords))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
sum((k, v) for k, v in kwargs.items())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
5-2544710

original snippet: 
res = dict((k, v) for k, v in kwargs.items() if v is not None)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sum))) (expr*-args (GeneratorExp (expr-elt (Tuple (expr*-elts (Name (identifier-id k)) (Name (identifier-id v))))) (comprehension*-generators (comprehension (expr-target (Tuple (expr*-elts (Name (identifier-id k)) (Name (identifier-id v))))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr items))) (expr*-args) (keyword*-keywords))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
sum((k, v) for k, v in kwargs.items())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
6-14971373

original snippet: 
subprocess.check_output('ps -ef | grep something | wc -l', shell=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id sys))) (identifier-attr decode))) (expr*-args (Str (string-s _))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(sys.decode('_'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
7-6726636

original snippet: 
"""""".join(['a', 'b', 'c'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr join))) (expr*-args (List (expr*-elts (Str (string-s a)) (Str (string-s b)) (Str (string-s x))))) (keyword*-keywords))))))
predicted code: 
"""""".join(['a', 'b', 'x'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
8-18079563

original snippet: 
pd.Series(list(set(s1).intersection(set(s2))))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id session))) (identifier-attr query))) (expr*-args (Name (identifier-id Tag))) (keyword*-keywords))) (identifier-attr group))) (expr*-args (Num (object-n 1))) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 0))))))) (keyword*-keywords))))))
predicted code: 
print(session.query(Tag).group(1)[0])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
9-8315209

original snippet: 
client.send('HTTP/1.0 200 OK\r\n')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr write))) (expr*-args (Str (string-s var_0))) (keyword*-keywords))))))
predicted code: 
Client.write('Client')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
10-26153795

original snippet: 
then = datetime.datetime.strptime(when, '%Y-%m-%d').date()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id datetime))) (identifier-attr datetime))) (identifier-attr now))) (expr*-args) (keyword*-keywords))))))
predicted code: 
datetime.datetime.now()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
11-172439

original snippet: 
inputString.split('\n')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s str_0))) (identifier-attr join))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id str))) (expr*-args (Name (identifier-id i))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr groupby))) (expr*-args) (keyword*-keywords))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
"""str_0""".join(str(i) for i in inputString.groupby())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
12-172439

original snippet: 
' a \n b \r\n c '.split('\n')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id ast))) (identifier-attr literal_eval))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
ast.literal_eval('\\ n b \\ r \\ n c')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
13-13954222

original snippet: 
""":""".join(str(x) for x in b)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (List (expr*-elts (Name (identifier-id a))))))))
predicted code: 
[a]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
14-5123839

original snippet: 
Entry.objects.filter()[:1].get()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr objects))) (identifier-attr order_by))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
Entry.objects.order_by('str_0')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
15-13567345

original snippet: 
a.sum(axis=1)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sum))) (expr*-args (GeneratorExp (expr-elt (Subscript (expr-value (Name (identifier-id row))) (slice-slice (Index (expr-value (Num (object-n 0))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id row))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
sum(row[0] for row in var_0)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
16-29784889

original snippet: 
warnings.simplefilter('always')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id webbrowser))) (identifier-attr open))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
webbrowser.open('siempre')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
17-13550423

original snippet: 
print(' '.join(map(str, l)))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr concat))) (expr*-args (Str (string-s )) (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
re.concat('', L)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
18-25651990

original snippet: 
subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id subprocess))) (identifier-attr call))) (expr*-args (List (expr*-elts (Str (string-s shutdown)) (Str (string-s str_0))))) (keyword*-keywords))))))
predicted code: 
subprocess.call(['shutdown', 'hello.py'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
19-6633523

original snippet: 
my_float = float(my_string.replace(',', ''))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id struct))) (identifier-attr unpack))) (expr*-args (Str (string-s d)) (Name (identifier-id var_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(struct.unpack('d', my_string))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
20-6633523

original snippet: 
float('123,456.908'.replace(',', ''))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id int))) (expr*-args (Str (string-s str_0)) (Num (object-n 2))) (keyword*-keywords))))))
predicted code: 
int('123,456.908', 2)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
21-3108285

original snippet: 
sys.path.append('/path/to/whatever')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr get))) (expr*-args (Str (string-s .))) (keyword*-keywords (keyword (identifier?-arg extra) (expr-value (NameConstant (singleton-value True))))))))))
predicted code: 
os.get('.', extra='True')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
22-2195340

original snippet: 
re.split('(\\W+)', 'Words, words, words.')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr split))) (expr*-args (Str (string-s a)) (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
re.split('a', 'Palabras, palabras, palabras.')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
23-17977584

original snippet: 
file = open('Output.txt', 'a')
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id f))) (expr-value (Call (expr-func (Name (identifier-id open))) (expr*-args (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s str_0)) (Str (string-s w))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
f = open(open('Output.txt', 'w'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
24-22676

original snippet: 
urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id plt))) (identifier-attr find_all))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr compile))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
plt.find_all(re.compile('http://www.example.com/songs/mp3.mp3'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
25-22676

original snippet: 
u = urllib.request.urlopen(url)
f = open(file_name, 'wb')
meta = u.info()
file_size = int(meta.getheaders('Content-Length')[0])
print(('Downloading: %s Bytes: %s' % (file_name, file_size)))
file_size_dl = 0
block_sz = 8192
while True:
    buffer = u.read(block_sz)
    if (not buffer):
        break
    file_size_dl += len(buffer)
    f.write(buffer)
    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))
    status = (status + (chr(8) * (len(status) + 1)))
    print(status, end=' ')
f.close()
predicted ast: 
(Module (stmt*-body (Import (alias*-names (alias (identifier-name var_0) (identifier?-asname))))))
predicted code: 
import url
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
26-22676

original snippet: 
response = urllib.request.urlopen('http://www.example.com/')
html = response.read()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr listdir))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
os.listdir('http://www.example.com/')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
27-22676

original snippet: 
r = requests.get(url)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr listdir))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
os.listdir(url)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
28-22676

original snippet: 
response = requests.get(url, stream=True)
with open('10MB', 'wb') as handle:
    for data in tqdm(response.iter_content()):
        handle.write(data)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr listdir))) (expr*-args (Str (string-s var_0))) (keyword*-keywords))))))
predicted code: 
os.listdir('url')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
29-15405636

original snippet: 
parser.add_argument('--version', action='version', version='%(prog)s 2.0')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id parser))) (identifier-attr add_argument))) (expr*-args (Str (string-s str_0))) (keyword*-keywords (keyword (identifier?-arg nargs) (expr-value (Str (string-s str_0))))))))))
predicted code: 
parser.add_argument('--version', nargs='--version')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
30-17665809

original snippet: 
{i: d[i] for i in d if i != 'c'}
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id var_0))) (expr*-args (Str (string-s 3))) (keyword*-keywords))))))
predicted code: 
d('3')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
31-41861705

original snippet: 
pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id df))) (identifier-attr set_index))) (expr*-args (List (expr*-elts (Str (string-s str_0)) (Str (string-s A))))) (keyword*-keywords (keyword (identifier?-arg axis) (expr-value (Num (object-n 1))))))))))
predicted code: 
df.set_index(['clave', 'A'], axis=1)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
32-10697757

original snippet: 
s.split(' ', 4)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr split))) (expr*-args (Str (string-s key))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(s.split('key'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
33-5404068

original snippet: 
input('Enter your input:')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id sys))) (identifier-attr exit))) (expr*-args) (keyword*-keywords))))))
predicted code: 
sys.exit()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
34-16344756

original snippet: 
app.run(debug=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr run))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg) (expr-value (Name (identifier-id var_0))))))))))
predicted code: 
app.run(**app)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
35-40133826

original snippet: 
pickle.dump(mylist, open('save.txt', 'wb'))
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr xpath))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
mylist = mylist.xpath('save.txt')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
36-4490961

original snippet: 
scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)
predicted ast: 
(Module (stmt*-body (With (withitem*-items (withitem (expr-context_expr (Call (expr-func (Name (identifier-id next))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (expr?-optional_vars (Name (identifier-id f))))) (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr insert))) (expr*-args) (keyword*-keywords))))))))
predicted code: 
with next(P) as f:
    P.insert()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
37-2173087

original snippet: 
numpy.zeros((3, 3, 3))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id np))) (identifier-attr crea))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
np.crea('(3,3,3)')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
38-6266727

original snippet: 
""" """.join(content.split(' ')[:-1])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr join))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Attribute (expr-value (Name (identifier-id x))) (identifier-attr upper))) (expr*-args) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Call (expr-func (Name (identifier-id range))) (expr*-args (Num (object-n 10))) (keyword*-keywords))) (expr*-ifs))))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(''.join(x.upper() for i in range(10)))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
39-30385151

original snippet: 
x = np.asarray(x).reshape(1, -1)[(0), :]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id np))) (identifier-attr delete))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
x = np.delete(x)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
40-15856127

original snippet: 
sum(sum(i) if isinstance(i, list) else i for i in L)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sum))) (expr*-args (Call (expr-func (Name (identifier-id zip))) (expr*-args (Starred (expr-value (Name (identifier-id var_0))))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
sum(zip(*L))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
41-1592158

original snippet: 
struct.unpack('!f', '470FC614'.decode('hex'))[0]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id int))) (expr*-args (Str (string-s str_0)) (Num (object-n 16))) (keyword*-keywords))))))
predicted code: 
int('470FC614', 16)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
42-5010536

original snippet: 
my_dict.update((x, y * 2) for x, y in list(my_dict.items()))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id dict))) (expr*-args (GeneratorExp (expr-elt (Tuple (expr*-elts (Name (identifier-id k)) (Name (identifier-id k))))) (comprehension*-generators (comprehension (expr-target (Tuple (expr*-elts (Name (identifier-id k)) (Name (identifier-id v))))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr items))) (expr*-args) (keyword*-keywords))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
dict((k, k) for k, v in my_dict.items())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
43-13745648

original snippet: 
subprocess.call('sleep.sh', shell=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id os))) (expr*-args (Name (identifier-id line))) (keyword*-keywords))))))
predicted code: 
os(line)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
44-44778

original snippet: 
""",""".join(l)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Subscript (expr-value (Name (identifier-id x))) (slice-slice (Index (expr-value (Num (object-n 1))))))))))))))))
predicted code: 
sorted(L, key=lambda x: x[1])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
45-44778

original snippet: 
myList = ','.join(map(str, myList))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr join))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id str))) (expr*-args (Name (identifier-id i))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
"""""".join(str(i) for i in myList)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
46-7286365

original snippet: 
list(reversed(list(range(10))))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Name (identifier-id range))) (expr*-args (Num (object-n 10))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
list(range(10))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
47-18454570

original snippet: 
print('lamp, bag, mirror'.replace('bag,', ''))
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id s))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id str_1))) (identifier-attr replace))) (expr*-args (Str (string-s str_0)) (Str (string-s str_1))) (keyword*-keywords))))))
predicted code: 
s = lÃ¡mpara, bolsa, espejo.replace('bolsa', 'lÃ¡mpara, bolsa, espejo')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
48-4357787

original snippet: 
""".""".join(s.split('.')[::-1])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id subprocess))) (identifier-attr call))) (expr*-args (List (expr*-elts (Str (string-s shutdown)) (Str (string-s str_0)) (Str (string-s str_0))))) (keyword*-keywords))))))
predicted code: 
subprocess.call(['shutdown', '.', '.'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
49-21787496

original snippet: 
datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr decode))) (expr*-args (Str (string-s utf8))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(s.decode('utf8'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
50-21787496

original snippet: 
time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 / 1000.0))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id urllib))) (identifier-attr parse))) (identifier-attr unquote))) (expr*-args (Str (string-s str_1))) (keyword*-keywords))))))
predicted code: 
urllib.parse.unquote('% Y-% m-% d% H:% M:% S')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
51-20573459

original snippet: 
(datetime.datetime.now() - datetime.timedelta(days=7)).date()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id datetime))) (identifier-attr now))) (expr*-args) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 1))))))))))
predicted code: 
datetime.now()[1]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
52-15352457

original snippet: 
print(sum(row[column] for row in data))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (BinOp (expr-left (Name (identifier-id i))) (operator-op (Sub)) (expr-right (Name (identifier-id b))))) (comprehension*-generators (comprehension (expr-target (Tuple (expr*-elts (Name (identifier-id x)) (Name (identifier-id y))))) (expr-iter (Call (expr-func (Name (identifier-id enumerate))) (expr*-args (Call (expr-func (Name (identifier-id enumerate))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[(i - b) for x, y in enumerate(enumerate(column))]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
53-15352457

original snippet: 
[sum(row[i] for row in array) for i in range(len(array[0]))]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sum))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id sum))) (expr*-args (Name (identifier-id x))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
sum(sum(x) for x in array)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
54-23164058

original snippet: 
base64.b64encode(bytes('your string', 'utf-8'))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Str (string-s str_1))) (identifier-attr decode))) (expr*-args (Str (string-s hex))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print('str_1'.decode('hex'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
55-11533274

original snippet: 
dict((k, [d[k] for d in dicts]) for k in dicts[0])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id dict))) (expr*-args (GeneratorExp (expr-elt (Name (identifier-id pair))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr items))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))) (expr*-ifs)) (comprehension (expr-target (Name (identifier-id y))) (expr-iter (Name (identifier-id x))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
dict(pair for x in list(dicts.items()) for y in x)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
56-11533274

original snippet: 
{k: [d[k] for d in dicts] for k in dicts[0]}
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id dict))) (expr*-args (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id var_0)) (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr keys))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
dict(zip(dicts, dicts.keys()))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
57-11236006

original snippet: 
[k for k, v in list(Counter(mylist).items()) if v > 1]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
sorted(mylist)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
58-2354166

original snippet: 
sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr chdir))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
__file__ = os.chdir(__file__)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
59-2354166

original snippet: 
sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id var_0))) (expr*-args (Str (string-s var_0))) (keyword*-keywords))) (identifier-attr encode))) (expr*-args (Str (string-s sys.path))) (keyword*-keywords))))))
predicted code: 
subdir('subdir').encode('sys.path')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
60-20211942

original snippet: 
db.execute("INSERT INTO present VALUES('test2', ?, 10)", (None,))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id cursor))) (identifier-attr execute))) (expr*-args (Str (string-s str_0)) (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
cursor.execute('Ninguno', 'Ninguno')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
61-406121

original snippet: 
[image for menuitem in list_of_menuitems for image in menuitem]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id l))) (expr-value (ListComp (expr-elt (Subscript (expr-value (Name (identifier-id i))) (slice-slice (Index (expr-value (Name (identifier-id i))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))))))
predicted code: 
l = [i[i] for i in list_of_menuitems]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
62-4741537

original snippet: 
a.extend(b)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr pop))) (expr*-args) (keyword*-keywords))))))
predicted code: 
a.pop()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
63-31247198

original snippet: 
np.savetxt('c:\\data\\np.txt', df.values, fmt='%d')
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id pd))) (identifier-attr read_csv))) (expr*-args (Str (string-s var_0))) (keyword*-keywords (keyword (identifier?-arg) (expr-value (Str (string-s ,))))))))))
predicted code: 
df = pd.read_csv('df', **',')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
64-31247198

original snippet: 
df.to_csv('c:\\data\\pandas.txt', header=None, index=None, sep=' ', mode='a')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr xpath))) (expr*-args (Str (string-s clear))) (keyword*-keywords))))))
predicted code: 
df.xpath('clear')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
65-15851568

original snippet: 
print(x.rpartition('-')[0])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr split))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 0))))))))))
predicted code: 
x.split('-')[0]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
66-15851568

original snippet: 
print(x.rsplit('-', 1)[0])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id str_0))) (identifier-attr count))) (expr*-args (Str (string-s str_0)) (Num (object-n 1))) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 1))))))))))
predicted code: 
-.count('-', 1)[1]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
67-17438096

original snippet: 
ftp.storlines('STOR ' + filename, open(filename, 'r'))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id exec))) (expr*-args (Call (expr-func (Name (identifier-id bool))) (expr*-args (Name (identifier-id a))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
exec(bool(a))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
68-15049182

original snippet: 
browser.execute_script("document.getElementById('XYZ').value+='1'")
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id driver))) (identifier-attr open))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr clear))) (expr*-args) (keyword*-keywords))))))
predicted code: 
driver.open('XYZ').clear()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
69-28742436

original snippet: 
np.maximum([2, 3, 4], [1, 5, 2])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Name (identifier-id item))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id str_0)) (Name (identifier-id str_1))) (keyword*-keywords))) (expr*-ifs (Compare (expr-left (Name (identifier-id value))) (cmpop*-ops (Eq)) (expr*-comparators (Name (identifier-id value))))))))))))
predicted code: 
[item for x in zip([2, 3, 4], [1, 5, 2]) if value == value]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
70-34280147

original snippet: 
print(l[3:] + l[:3])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr split))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(list(l.split()))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
71-11801309

original snippet: 
for fn in os.listdir('.'):
    if os.path.isfile(fn):
        pass
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr chdir))) (expr*-args (Str (string-s str_0))) (keyword*-keywords (keyword (identifier?-arg shell) (expr-value (NameConstant (singleton-value True))))))))))
predicted code: 
os.chdir('', shell='True')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
72-11801309

original snippet: 
for (root, dirs, filenames) in os.walk(source):
    for f in filenames:
        pass
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr system))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg shell) (expr-value (NameConstant (singleton-value True))))))))))
predicted code: 
os.system(source, shell='True')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
73-4172131

original snippet: 
[int(1000 * random.random()) for i in range(10000)]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id itertools))) (identifier-attr product))) (expr*-args (Starred (expr-value (Name (identifier-id crear))))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
list(itertools.product(*crear))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
74-852055

original snippet: 
db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id subprocess))) (identifier-attr Popen))) (expr*-args (List (expr*-elts (Str (string-s str_0)) (Str (string-s str_0)) (Str (string-s str_1))))) (keyword*-keywords))))))
predicted code: 
subprocess.Popen(['SELECT * FROM horario donde la estaciÃ³n = $ 1',
    'SELECT * FROM horario donde la estaciÃ³n = $ 1', 'foo.key ()'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
75-15325182

original snippet: 
df.b.str.contains('^f')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id pd))) (identifier-attr concat))) (expr*-args (BinOp (expr-left (Attribute (expr-value (Name (identifier-id df))) (identifier-attr values))) (operator-op (Mult)) (expr-right (Num (object-n 1))))) (keyword*-keywords (keyword (identifier?-arg rows) (expr-value (Name (identifier-id k))))))))))
predicted code: 
pd.concat(df.values * 1, rows=k)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
76-583557

original snippet: 
print('\n'.join('\t'.join(str(col) for col in row) for row in tab))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr stat))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(tab.stat())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
77-38535931

original snippet: 
df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id pd))) (identifier-attr concat))) (expr*-args (BinOp (expr-left (List (expr*-elts (Name (identifier-id var_0))))) (operator-op (Mult)) (expr-right (Num (object-n 1))))) (keyword*-keywords (keyword (identifier?-arg axis) (expr-value (Num (object-n 1))))))))))
predicted code: 
pd.concat([df] * 1, axis=1)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
78-13945749

original snippet: 
"""({:d} goals, ${:d})""".format(self.goals, self.penalties)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id eval))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
eval('')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
79-13945749

original snippet: 
"""({} goals, ${})""".format(self.goals, self.penalties)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Str (string-s Total-SPACE-score-SPACE-for))) (identifier-attr format))) (expr*-args (Name (identifier-id score))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print('Total score for'.format(score))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
80-13945749

original snippet: 
"""({0.goals} goals, ${0.penalties})""".format(self)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id line))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
line('({} 0.goals objetivos, $ {} 0.penalties)')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
81-18524642

original snippet: 
[int(''.join(str(d) for d in x)) for x in L]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Name (identifier-id int))) (expr*-args (Name (identifier-id i))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))))))
predicted code: 
[int(i) for i in L]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
82-18524642

original snippet: 
[''.join(str(d) for d in x) for x in L]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Str (string-s -SPACE-Hello))) (identifier-attr join))) (expr*-args (Call (expr-func (Name (identifier-id set))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
list(' Hello'.join(set(L)))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
83-18524642

original snippet: 
L = [int(''.join([str(y) for y in x])) for x in L]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Name (identifier-id map))) (expr*-args (Name (identifier-id list)) (Name (identifier-id b))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id l))) (expr-iter (Call (expr-func (Name (identifier-id zip))) (expr*-args (Starred (expr-value (Name (identifier-id var_0))))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[map(list, b) for l in zip(*L)]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
84-7138686

original snippet: 
myfile.write('\n'.join(lines))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s -SPACE-))) (identifier-attr join))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
""" """.join(lines)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
85-1866343

original snippet: 
[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id x))) (identifier-attr split))) (expr*-args (Str (string-s ,))) (keyword*-keywords))) (slice-slice (Index (expr-value (UnaryOp (unaryop-op (USub)) (expr-operand (Num (object-n 1))))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Call (expr-func (Name (identifier-id range))) (expr*-args (Str (string-s None))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[x.split(',')[-1] for i in range('None')]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
86-17238587

original snippet: 
text = re.sub('\\b(\\w+)( \\1\\b)+', '\\1', text)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id str_0))) (identifier-attr strip))) (expr*-args) (keyword*-keywords))))))
predicted code: 
usando expresiones regulares Text.strip()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
87-26053849

original snippet: 
df.astype(bool).sum(axis=1)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id pd))) (identifier-attr DataFrame))) (expr*-args (Subscript (expr-value (Name (identifier-id df))) (slice-slice (Index (expr-value (Str (string-s contar))))))) (keyword*-keywords))))))
predicted code: 
pd.DataFrame(df['contar'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
88-15534223

original snippet: 
re.search('(?<!Distillr)\\\\AcroTray\\.exe', 'C:\\SomeDir\\AcroTray.exe')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr mmap))) (expr*-args (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr join))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr match))) (expr*-args (Str (string-s )) (Name (identifier-id s))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id c))) (expr-iter (Str (string-s str_1))) (expr*-ifs))))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
re.mmap(''.join(re.match('', s) for c in 'C: \\ \\ somedir acrotray.exe'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
89-5453026

original snippet: 
"""QH QD JC KD JS""".split()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s str_0))) (identifier-attr split))) (expr*-args) (keyword*-keywords))))))
predicted code: 
"""QH QD JC KD JS""".split()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
90-18168684

original snippet: 
print(re.search('>.*<', line).group(0))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr search))) (expr*-args (Str (string-s .)) (Name (identifier-id var_0))) (keyword*-keywords))) (identifier-attr group))) (expr*-args (Num (object-n 1))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(re.search('.', line).group(1))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
91-4914277

original snippet: 
open(filename, 'w').close()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s var_0))) (keyword*-keywords))) (identifier-attr strip))) (expr*-args) (keyword*-keywords))))))
predicted code: 
open('filename').strip()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
92-19068269

original snippet: 
datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id datetime))) (identifier-attr datetime))) (identifier-attr strptime))) (expr*-args (Name (identifier-id str_0)) (Str (string-s %Y-%m-%d))) (keyword*-keywords))) (identifier-attr strftime))) (expr*-args (Str (string-s %Y-%m-%d))) (keyword*-keywords))))))
predicted code: 
datetime.datetime.strptime(% Y-% m-% d% H:% M:% S.% f, '%Y-%m-%d').strftime(
    '%Y-%m-%d')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
93-20683167

original snippet: 
[index for index, item in enumerate(thelist) if item[0] == '332']
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (Num (object-n 0))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))))))
predicted code: 
[thelist[0] for x in thelist]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
94-30693804

original snippet: 
re.sub('[^\\sa-zA-Z0-9]', '', text).lower().strip()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr strip))) (expr*-args) (keyword*-keywords))))))
predicted code: 
Text.strip()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
95-30693804

original snippet: 
re.sub('(?!\\s)[\\W_]', '', text).lower().strip()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr strip))) (expr*-args) (keyword*-keywords))))))
predicted code: 
Text.strip()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
96-17138464

original snippet: 
plt.plot(x, y, label='H\u2082O')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id subíndice))) (identifier-attr replace))) (expr*-args (Str (string-s str_0)) (Str (string-s ))) (keyword*-keywords))) (identifier-attr replace))) (expr*-args (Str (string-s str_3)) (Str (string-s str_1))) (keyword*-keywords))) (identifier-attr replace))) (expr*-args (Str (string-s str_3)) (Str (string-s str_1))) (keyword*-keywords))))))
predicted code: 
subíndice.replace('H20', '').replace('y', '2').replace('y', '2')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
97-17138464

original snippet: 
plt.plot(x, y, label='$H_2O$')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id subíndice))) (identifier-attr replace))) (expr*-args (Str (string-s str_0)) (Str (string-s ))) (keyword*-keywords))) (identifier-attr replace))) (expr*-args (Str (string-s str_3)) (Str (string-s str_1))) (keyword*-keywords))) (identifier-attr replace))) (expr*-args (Str (string-s str_3)) (Str (string-s str_1))) (keyword*-keywords))))))
predicted code: 
subíndice.replace('H20', '').replace('y', '2').replace('y', '2')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
98-9138112

original snippet: 
[x for x in mylist if len(x) == 3]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (ListComp (expr-elt (Subscript (expr-value (Name (identifier-id item))) (slice-slice (Index (expr-value (Num (object-n 0))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id item))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))))))
predicted code: 
mylist = [item[0] for item in mylist]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
99-1807026

original snippet: 
lst = [Object() for _ in range(100)]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (ListComp (expr-elt (Call (expr-func (Attribute (expr-value (Name (identifier-id x))) (identifier-attr count))) (expr*-args) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Call (expr-func (Name (identifier-id range))) (expr*-args (Num (object-n 100))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
lst = [x.count() for i in range(100)]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
100-1807026

original snippet: 
lst = [Object() for i in range(100)]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (ListComp (expr-elt (BinOp (expr-left (Name (identifier-id x))) (operator-op (Add)) (expr-right (Name (identifier-id j))))) (comprehension*-generators (comprehension (expr-target (Tuple (expr*-elts (Name (identifier-id a)) (Name (identifier-id b))))) (expr-iter (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id var_0)) (Name (identifier-id str_0))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
lst = [(x + j) for a, b in zip(lst, Object)]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
101-19664253

original snippet: 
self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s var_1)) (Str (string-s rb))) (keyword*-keywords))) (identifier-attr read))) (expr*-args) (keyword*-keywords))) (identifier-attr read))) (expr*-args) (keyword*-keywords))))))
predicted code: 
open('someclass', 'rb').read().read()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
102-13793321

original snippet: 
df1.merge(df2, on='Date_Time')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id pd))) (identifier-attr DataFrame))) (expr*-args (BinOp (expr-left (Attribute (expr-value (Name (identifier-id str_0))) (identifier-attr values))) (operator-op (Sub)) (expr-right (Attribute (expr-value (Name (identifier-id str_0))) (identifier-attr values))))) (keyword*-keywords (keyword (identifier?-arg columns) (expr-value (Attribute (expr-value (Name (identifier-id var_1))) (identifier-attr columns))))))))))
predicted code: 
pd.DataFrame(df2.values - df2.values, columns=var_1.columns)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
103-3367288

original snippet: 
'first string is: %s, second one is: %s' % (str1, 'geo.tif')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s operador))) (identifier-attr format))) (expr*-args) (keyword*-keywords))))))
predicted code: 
"""operador""".format()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
104-273192

original snippet: 
if (not os.path.exists(directory)):
    os.makedirs(directory)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id os))) (identifier-attr path))) (identifier-attr exists))) (expr*-args (Num (object-n 0)) (Num (object-n 2))) (keyword*-keywords))))))
predicted code: 
os.path.exists(0, 2)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
105-273192

original snippet: 
try:
    os.makedirs(path)
except OSError:
    if (not os.path.isdir(path)):
        raise
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr listdir))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr issubset))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr walk))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
os.listdir('existe path').issubset(os.walk('existe path'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
106-273192

original snippet: 
distutils.dir_util.mkpath(path)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr listdir))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr issubset))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr walk))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
os.listdir('existe path').issubset(os.walk('existe path'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
107-273192

original snippet: 
try:
    os.makedirs(path)
except OSError as exception:
    if (exception.errno != errno.EEXIST):
        raise
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr listdir))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr issubset))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr walk))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
os.listdir('existe path').issubset(os.walk('existe path'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
108-18785032

original snippet: 
re.sub('\\bH3\\b', 'H1', text)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id str_2))) (identifier-attr replace))) (expr*-args (Str (string-s )) (Str (string-s str_1))) (keyword*-keywords))))))
predicted code: 
texto.replace('', 'H1')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
109-1450897

original snippet: 
re.sub('\\D', '', 'aas30dsa20')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s str_1))) (identifier-attr decode))) (expr*-args (Str (string-s str_1))) (keyword*-keywords))))))
predicted code: 
"""""".decode('')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
110-1450897

original snippet: 
"""""".join([x for x in 'aas30dsa20' if x.isdigit()])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id ord))) (expr*-args) (keyword*-keywords))))))
predicted code: 
ord()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
111-14435268

original snippet: 
print(soup.find('name').string)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (Str (string-s str_0))))))) (expr-value (Name (identifier-id var_0))))))
predicted code: 
soup['nombre'] = soup
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
112-4928274

original snippet: 
records = dict((record['_id'], record) for record in cursor)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id max))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
max(records)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
113-20180210

original snippet: 
np.concatenate((A, B))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id np))) (identifier-attr array))) (expr*-args (ListComp (expr-elt (Tuple (expr*-elts (Name (identifier-id x)) (Name (identifier-id y))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id item))) (expr-iter (Name (identifier-id str_1))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
np.array([(x, y) for item in str_1])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
114-20180210

original snippet: 
np.vstack((A, B))
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id np))) (identifier-attr outer))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
A = np.outer(A)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
115-2011048

original snippet: 
os.stat(filepath).st_size
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Attribute (expr-value (Name (identifier-id w))) (identifier-attr load))) (expr*-args (Name (identifier-id line))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id line))) (expr-iter (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s file.txt))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[w.load(line) for line in open('file.txt')]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
116-2600191

original snippet: 
l.count('a')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id json))) (identifier-attr search))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(json.search(L))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
117-2600191

original snippet: 
Counter(l)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sum))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id len))) (expr*-args (Name (identifier-id x))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
sum(len(x) for x in L)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
118-2600191

original snippet: 
[[x, l.count(x)] for x in set(l)]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sum))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id len))) (expr*-args (Name (identifier-id x))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
sum(len(x) for x in L)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
119-2600191

original snippet: 
dict(((x, l.count(x)) for x in set(l)))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sum))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id len))) (expr*-args (Name (identifier-id x))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
sum(len(x) for x in L)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
120-2600191

original snippet: 
l.count('b')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id json))) (identifier-attr search))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(json.search(L))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
121-12842997

original snippet: 
shutil.copy(srcfile, dstdir)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s str_0)) (Str (string-s r))) (keyword*-keywords))) (identifier-attr read))) (expr*-args) (keyword*-keywords))))))
predicted code: 
open('', 'r').read()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
122-1555968

original snippet: 
max(k for k, v in x.items() if v != 0)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id max))) (expr*-args (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr items))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg e) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Subscript (expr-value (Name (identifier-id x))) (slice-slice (Index (expr-value (Num (object-n 1))))))))))))))))
predicted code: 
max(list(x.items()), key=lambda e: x[1])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
123-1555968

original snippet: 
(k for k, v in x.items() if v != 0)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id max))) (expr*-args (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr keys))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))) (keyword*-keywords (keyword (identifier?-arg) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Subscript (expr-value (Name (identifier-id x))) (slice-slice (Index (expr-value (Num (object-n 0))))))))))))))))
predicted code: 
max(list(x.keys()), **lambda x: x[0])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
124-1555968

original snippet: 
max(k for k, v in x.items() if v != 0)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id max))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Name (identifier-id float))))))))))
predicted code: 
max(x, key=float)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
125-17021863

original snippet: 
file.seek(0)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id os))) (identifier-attr path))) (identifier-attr insert))) (expr*-args (Num (object-n 0)) (Str (string-s pon))) (keyword*-keywords))))))
predicted code: 
os.path.insert(0, 'pon')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
126-38152389

original snippet: 
df['c'] = np.where(df['a'].isnull, df['b'], df['a'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr groupby))) (expr*-args (List (expr*-elts (Str (string-s str_0))))) (keyword*-keywords (keyword (identifier?-arg axis) (expr-value (Num (object-n 1))))))) (identifier-attr mean))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg axis) (expr-value (Num (object-n 1))))))))))
predicted code: 
df.groupby(['b'], axis=1).mean(axis=1)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
127-4175686

original snippet: 
del d['ele']
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id var_0))) (expr*-args (Str (string-s 3))) (keyword*-keywords))))))
predicted code: 
d('3')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
128-5871168

original snippet: 
MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id dparser))) (identifier-attr path))) (identifier-attr insert))) (expr*-args (Num (object-n 100)) (Str (string-s var_0))) (keyword*-keywords))))))
predicted code: 
dparser.path.insert(100, 'MyModel')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
129-11574195

original snippet: 
['it'] + ['was'] + ['annoying']
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Name (identifier-id x))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Name (identifier-id a))) (expr*-ifs (Compare (expr-left (Name (identifier-id x))) (cmpop*-ops (NotEq)) (expr*-comparators (List (expr*-elts (Name (identifier-id str_1))))))))))))))
predicted code: 
[x for x in a if x != [y la lista [ 'era']]]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
130-587647

original snippet: 
str(int(x) + 1).zfill(len(x))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr size))) (expr*-args) (keyword*-keywords))) (identifier-attr size))) (expr*-args) (keyword*-keywords))))))
predicted code: 
x.size().size()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
131-17315881

original snippet: 
all(df.index[:-1] <= df.index[1:])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Compare (expr-left (Str (string-s var_0))) (cmpop*-ops (In)) (expr*-comparators (Name (identifier-id var_0))))))))
predicted code: 
'df' in df
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
132-16296643

original snippet: 
list(t)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id l))) (expr-value (Call (expr-func (Name (identifier-id str))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
l = str(t)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
133-16296643

original snippet: 
tuple(l)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
list(zip(t))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
134-16296643

original snippet: 
level1 = map(list, level1)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id l))) (expr-value (Call (expr-func (Name (identifier-id str))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
l = str(level1)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
135-3880399

original snippet: 
pprint.pprint(dataobject, logFile)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id urllib))) (identifier-attr request))) (identifier-attr urlopen))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
urllib.request.urlopen('')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
136-21800169

original snippet: 
df.loc[df['BoolCol']]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id session))) (identifier-attr query))) (expr*-args (Name (identifier-id df))) (keyword*-keywords))) (identifier-attr size))) (expr*-args) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 0))))))))))
predicted code: 
session.query(df).size()[0]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
137-21800169

original snippet: 
df.iloc[np.flatnonzero(df['BoolCol'])]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr groupby))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr fillna))) (expr*-args) (keyword*-keywords))) (identifier-attr reset_index))) (expr*-args) (keyword*-keywords))))))
predicted code: 
df.groupby('BoolCol').fillna().reset_index()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
138-21800169

original snippet: 
df[df['BoolCol'] == True].index.tolist()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id session))) (identifier-attr query))) (expr*-args (Name (identifier-id str_0))) (keyword*-keywords))) (identifier-attr size))) (expr*-args) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 0))))))))))
predicted code: 
session.query(BoolCol).size()[0]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
139-21800169

original snippet: 
df[df['BoolCol']].index.tolist()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr groupby))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (slice-slice (Index (expr-value (Str (string-s str_0))))))) (identifier-attr unique))) (expr*-args) (keyword*-keywords))))))
predicted code: 
df.groupby('BoolCol')['BoolCol'].unique()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
140-299446

original snippet: 
os.chdir(owd)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr chdir))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
os.chdir(owd)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
141-14695134

original snippet: 
c.execute("INSERT INTO test VALUES (?, 'bar')", (testfield,))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr replace))) (expr*-args (Str (string-s str_0)) (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
testfield.replace('C', 'C')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
142-24242433

original snippet: 
"""\\x89\\n""".decode('string_escape')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id x))) (identifier-attr decode))) (expr*-args (Str (string-s utf-8))) (keyword*-keywords))) (identifier-attr decode))) (expr*-args (Str (string-s utf8))) (keyword*-keywords))))))
predicted code: 
x.decode('utf-8').decode('utf8')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
143-24242433

original snippet: 
raw_string.decode('string_escape')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr decode))) (expr*-args (Str (string-s var_0))) (keyword*-keywords))) (identifier-attr size))) (expr*-args) (keyword*-keywords))))))
predicted code: 
raw_string.decode('raw_string').size()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
144-24242433

original snippet: 
raw_byte_string.decode('unicode_escape')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr decode))) (expr*-args (Str (string-s var_0))) (keyword*-keywords))) (identifier-attr size))) (expr*-args) (keyword*-keywords))))))
predicted code: 
raw_byte_string.decode('raw_byte_string').size()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
145-22882922

original snippet: 
[m.group(0) for m in re.finditer('(\\d)\\1*', s)]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Attribute (expr-value (Name (identifier-id x))) (identifier-attr strip))) (expr*-args) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id s))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr split))) (expr*-args (Str (string-s ,))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[x.strip() for s in s.split(',')]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
146-4143502

original snippet: 
plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id con))) (identifier-attr dispersar))) (expr*-args (Name (identifier-id color))) (keyword*-keywords (keyword (identifier?-arg color) (expr-value (Str (string-s str_0))))))))))
predicted code: 
con.dispersar(color, color='np.random.randn (100)')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
147-4143502

original snippet: 
plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id sys))) (identifier-attr find_all))) (expr*-args (Str (string-s a))) (keyword*-keywords))))))
predicted code: 
sys.find_all('a')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
148-32063985

original snippet: 
soup.find('div', id='main-content').decompose()
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id r))) (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s div))) (keyword*-keywords))) (identifier-attr read))) (expr*-args) (keyword*-keywords))))))
predicted code: 
r = open('div').read()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
149-27975069

original snippet: 
df[df['ids'].str.contains('ball')]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id driver))) (identifier-attr pivot_table))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg axis) (expr-value (Num (object-n 0))))))))))
predicted code: 
driver.pivot_table(ball, axis=0)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
150-20461165

original snippet: 
df.reset_index(level=0, inplace=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr groupby))) (expr*-args (Str (string-s group))) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 0))))))) (identifier-attr min))) (expr*-args) (keyword*-keywords))))))
predicted code: 
df.groupby('group')[0].min()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
151-20461165

original snippet: 
df['index1'] = df.index
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr groupby))) (expr*-args (Str (string-s group))) (keyword*-keywords))) (slice-slice (Index (expr-value (Str (string-s value))))))) (identifier-attr to_dict))) (expr*-args) (keyword*-keywords))))))
predicted code: 
df.groupby('group')['value'].to_dict()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
152-20461165

original snippet: 
df.reset_index(level=['tick', 'obs'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id df))) (identifier-attr drop))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id pd))) (identifier-attr arange))) (expr*-args (Num (object-n 5))) (keyword*-keywords))) (keyword*-keywords (keyword (identifier?-arg axis) (expr-value (Num (object-n 0))))))))))
predicted code: 
df.drop(pd.arange(5), axis=0)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
153-4685571

original snippet: 
[x[::-1] for x in b]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id max))) (expr*-args (List (expr*-elts (Name (identifier-id str_0))))) (keyword*-keywords))))))
predicted code: 
max([B])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
154-17960441

original snippet: 
np.array([zip(x, y) for x, y in zip(a, b)])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr pop))) (expr*-args) (keyword*-keywords))))))
predicted code: 
a.pop()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
155-17960441

original snippet: 
np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr T))))))
predicted code: 
a.T
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
156-438684

original snippet: 
""",""".join([str(i) for i in list_of_ints])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr join))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id str))) (expr*-args (Name (identifier-id i))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
"""""".join(str(i) for i in list_of_ints)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
157-8519922

original snippet: 
requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id urllib))) (identifier-attr request))) (identifier-attr urlopen))) (expr*-args (Str (string-s var_0)) (Num (object-n 0))) (keyword*-keywords))))))
predicted code: 
urllib.request.urlopen('DATA', 0)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
158-26443308

original snippet: 
'abcd}def}'.rfind('}')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id str_1))) (identifier-attr replace))) (expr*-args (Str (string-s str_0)) (Str (string-s str_0)) (Num (object-n 1))) (keyword*-keywords))))))
predicted code: 
ABCD}} def.replace('}', '}', 1)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
159-22365172

original snippet: 
print([item for item in [1, 2, 3]])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id str_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Subscript (expr-value (Name (identifier-id x))) (slice-slice (Index (expr-value (Num (object-n 1))))))))))))))))
predicted code: 
sorted([1, 2, 3], key=lambda x: x[1])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
160-12300912

original snippet: 
[(x['x'], x['y']) for x in d]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr keys))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
list(d.keys())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
161-678236

original snippet: 
print(os.path.splitext(os.path.basename('hemanth.txt'))[0])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr system))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
os.system('hemanth.txt')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
162-2597166

original snippet: 
dict(x[i:i + 2] for i in range(0, len(x), 2))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (DictComp (expr-key (Name (identifier-id i))) (expr-value (BinOp (expr-left (Subscript (expr-value (Name (identifier-id str_1))) (slice-slice (Index (expr-value (Name (identifier-id i))))))) (operator-op (Div)) (expr-right (Subscript (expr-value (Name (identifier-id str_2))) (slice-slice (Index (expr-value (Name (identifier-id i))))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Name (identifier-id b))) (expr*-ifs))))))))
predicted code: 
{i: (str_1[i] / str_2[i]) for i in b}
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
163-7895449

original snippet: 
values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Name (identifier-id getattr))) (expr*-args (Name (identifier-id item))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id _))) (expr-iter (Call (expr-func (Name (identifier-id range))) (expr*-args (Num (object-n 10))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[getattr(item) for _ in range(10)]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
164-31617845

original snippet: 
df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr loc))) (slice-slice (Index (expr-value (UnaryOp (unaryop-op (Invert)) (expr-operand (Call (expr-func (Attribute (expr-value (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (Str (string-s str_0))))))) (identifier-attr isin))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))))))))
predicted code: 
df.loc[~df['closing_price'].isin(df)]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
165-25698710

original snippet: 
df.replace({'\n': '<br>'}, regex=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr replace))) (expr*-args (Str (string-s a)) (Str (string-s str_1))) (keyword*-keywords (keyword (identifier?-arg axis) (expr-value (Num (object-n 1)))) (keyword (identifier?-arg inplace) (expr-value (NameConstant (singleton-value True))))))))))
predicted code: 
df.replace('a', '', axis=1, inplace='True')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
166-25698710

original snippet: 
df.replace({'\n': '<br>'}, regex=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr replace))) (expr*-args (Str (string-s str_1)) (Str (string-s str_1))) (keyword*-keywords (keyword (identifier?-arg axis) (expr-value (Num (object-n 1))))))))))
predicted code: 
df.replace('', '', axis=1)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
167-41923858

original snippet: 
[(x + y) for x, y in zip(word, word[1:])]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Name (identifier-id int))) (expr*-args (Name (identifier-id y))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id _))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr split))) (expr*-args) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[int(y) for _ in word.split()]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
168-41923858

original snippet: 
list(map(lambda x, y: x + y, word[:-1], word[1:]))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Name (identifier-id x))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Call (expr-func (Name (identifier-id reversed))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (expr*-ifs)) (comprehension (expr-target (Name (identifier-id y))) (expr-iter (Name (identifier-id x))) (expr*-ifs))))))))
predicted code: 
[x for x in reversed(word) for y in x]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
169-9760588

original snippet: 
print(re.findall('(https?://[^\\s]+)', myString))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Attribute (expr-value (Name (identifier-id x))) (identifier-attr a))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id _f))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))))))
predicted code: 
[x.a for _f in myString]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
170-9760588

original snippet: 
print(re.search('(?P<url>https?://[^\\s]+)', myString).group('url'))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Attribute (expr-value (Name (identifier-id x))) (identifier-attr a))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id _f))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))))))
predicted code: 
[x.a for _f in myString]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
171-5843518

original snippet: 
re.sub('[^A-Za-z0-9]+', '', mystring)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr strip))) (expr*-args) (keyword*-keywords))))))
predicted code: 
mystring.strip()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
172-36674519

original snippet: 
pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id datetime))) (identifier-attr datetime))) (identifier-attr now))) (expr*-args) (keyword*-keywords))) (identifier-attr strftime))) (expr*-args (Str (string-s %Y-%m-%d))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(datetime.datetime.now().strftime('%Y-%m-%d'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
173-508657

original snippet: 
matrix = [[a, b], [c, d], [e, f]]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (Tuple (expr*-elts (Num (object-n 0)) (Num (object-n 3))))))))) (identifier-attr reset_index))) (expr*-args) (keyword*-keywords))))))
predicted code: 
matrix[0, 3].reset_index()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
174-1007481

original snippet: 
mystring.replace(' ', '_')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr sub))) (expr*-args (Str (string-s subrayado)) (Str (string-s subrayado)) (Name (identifier-id text))) (keyword*-keywords))))))
predicted code: 
re.sub('subrayado', 'subrayado', text)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
175-51520

original snippet: 
os.path.abspath('mydir/myfile.txt')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Name (identifier-id str_0))) (slice-slice (Index (expr-value (Str (string-s str_0))))))))))
predicted code: 
mydir / miarchivo.txt['mydir / miarchivo.txt']
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
176-1249786

original snippet: 
""" """.join(my_string.split())
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr strip))) (expr*-args) (keyword*-keywords))))))
predicted code: 
my_string.strip()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
177-4444923

original snippet: 
os.path.splitext(filename)[0]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr rename))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
os.rename(filename)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
178-13728486

original snippet: 
[sum(l[:i]) for i, _ in enumerate(l)]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (BinOp (expr-left (Name (identifier-id i))) (operator-op (Div)) (expr-right (Name (identifier-id y))))) (comprehension*-generators (comprehension (expr-target (Tuple (expr*-elts (Name (identifier-id x)) (Name (identifier-id y))))) (expr-iter (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id var_0)) (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Slice (expr?-lower (Num (object-n 1))) (expr?-upper) (expr?-step))))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[(i / y) for x, y in zip(I, I[1:])]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
179-9743134

original snippet: 
"""Docs/src/Scripts/temp""".replace('/', '/\x00/').split('\x00')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id ast))) (identifier-attr split))) (expr*-args (Str (string-s porstr_1str_2en)) (Str (string-s porstr_1str_2en))) (keyword*-keywords))))))
predicted code: 
ast.split('porstr_1str_2en', 'porstr_1str_2en')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
180-20546419

original snippet: 
np.random.shuffle(np.transpose(r))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id np))) (identifier-attr array))) (expr*-args (List (expr*-elts (Name (identifier-id str_0))))) (keyword*-keywords (keyword (identifier?-arg axis) (expr-value (Num (object-n 0))))))))))
predicted code: 
np.array([r], axis=0)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
181-32675861

original snippet: 
df['D'] = df['B']
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Subscript (expr-value (Name (identifier-id df))) (slice-slice (Index (expr-value (Str (string-s str_0))))))) (identifier-attr tolist))) (expr*-args) (keyword*-keywords))))))
predicted code: 
df['B'].tolist()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
182-14227561

original snippet: 
list(data['A']['B'].values())[0]['maindata'][0]['Info']
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Name (identifier-id json))) (slice-slice (Index (expr-value (Call (expr-func (Name (identifier-id len))) (expr*-args (Name (identifier-id str_0))) (keyword*-keywords))))))))))
predicted code: 
json[len(datos)]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
183-14858916

original snippet: 
all(predicate(x) for x in string)
predicted ast: 
(Module (stmt*-body (If (expr-test (Call (expr-func (Name (identifier-id f))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (stmt*-body (Pass)) (stmt*-orelse))))
predicted code: 
if f(string):
    pass
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
184-574236

original snippet: 
os.statvfs('/').f_files - os.statvfs('/').f_ffree
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id len))) (expr*-args (Call (expr-func (Name (identifier-id bool))) (expr*-args (Name (identifier-id unidad))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
len(bool(unidad))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
185-6378889

original snippet: 
user_list = [int(number) for number in user_input.split(',')]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Attribute (expr-value (Name (identifier-id i))) (identifier-attr split))) (expr*-args) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id s))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr split))) (expr*-args) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[i.split() for s in user_input.split()]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
186-6378889

original snippet: 
[int(s) for s in user.split(',')]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Name (identifier-id map))) (expr*-args (Name (identifier-id int)) (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr split))) (expr*-args (Str (string-s ,))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
user = map(int, user.split(','))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
187-403421

original snippet: 
ut.sort(key=cmpfun, reverse=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr sort))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg) (expr-value (NameConstant (singleton-value True))))))))))
predicted code: 
ut.sort(**'True')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
188-403421

original snippet: 
ut.sort(key=lambda x: x.count, reverse=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id str_0))) (identifier-attr translate))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
count.translate(ut)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
189-403421

original snippet: 
ut.sort(key=lambda x: x.count, reverse=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr sort))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Call (expr-func (Attribute (expr-value (Name (identifier-id str_0))) (identifier-attr upper))) (expr*-args) (keyword*-keywords))))))))))))
predicted code: 
ut.sort(key=lambda x: count.upper())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
190-19601086

original snippet: 
driver.find_element_by_partial_link_text('Send').click()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id driver))) (identifier-attr find_element_by_id))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr clear))) (expr*-args) (keyword*-keywords))))))
predicted code: 
driver.find_element_by_id('Enviar').clear()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
191-19601086

original snippet: 
driver.findElement(By.linkText('Send InMail')).click()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id driver))) (identifier-attr find_element_by_id))) (expr*-args (Str (string-s href))) (keyword*-keywords))) (identifier-attr clear))) (expr*-args) (keyword*-keywords))))))
predicted code: 
driver.find_element_by_id('href').clear()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
192-19601086

original snippet: 
driver.find_element_by_link_text('Send InMail').click()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id driver))) (identifier-attr find_element_by_id))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr clear))) (expr*-args) (keyword*-keywords))))))
predicted code: 
driver.find_element_by_id('Enviar InMail').clear()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
193-3944876

original snippet: 
'ME' + str(i)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr join))) (expr*-args (GeneratorExp (expr-elt (Name (identifier-id c))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id c))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs (Call (expr-func (Attribute (expr-value (Name (identifier-id c))) (identifier-attr isdigit))) (expr*-args) (keyword*-keywords))))))) (keyword*-keywords))))))
predicted code: 
"""""".join(c for c in I if c.isdigit())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
194-4454298

original snippet: 
open('outfile', 'w').write('#test firstline\n' + open('infile').read())
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s str_1)) (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr read))) (expr*-args) (keyword*-keywords))) (identifier-attr read))) (expr*-args) (keyword*-keywords))))))
predicted code: 
open('archivo de entrada', 'de primera lÃ\xadnea #test \\ n').read().read()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
195-19729928

original snippet: 
l.sort(key=lambda t: len(t[1]), reverse=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Call (expr-func (Name (identifier-id len))) (expr*-args (Subscript (expr-value (Name (identifier-id x))) (slice-slice (Index (expr-value (Num (object-n 0))))))) (keyword*-keywords))))))))))))
predicted code: 
sorted(L, key=lambda x: len(x[0]))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
196-31371879

original snippet: 
re.findall('\\b(\\w+)d\\b', s)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr findall))) (expr*-args (Str (string-s A)) (Name (identifier-id text))) (keyword*-keywords))))))
predicted code: 
re.findall('A', text)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
197-9012008

original snippet: 
bool(re.search('ba[rzd]', 'foobarrrr'))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id np))) (identifier-attr array))) (expr*-args (ListComp (expr-elt (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr format))) (expr*-args (Name (identifier-id i))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id item))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id str_1))) (identifier-attr split))) (expr*-args) (keyword*-keywords))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
np.array([''.format(i) for item in str_1.split()])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
198-7961363

original snippet: 
list(set(t))
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id set))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (identifier-attr all))) (expr*-args) (keyword*-keywords))))))
predicted code: 
t = set(t).all()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
199-7961363

original snippet: 
list(set(source_list))
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id set))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (identifier-attr all))) (expr*-args) (keyword*-keywords))))))
predicted code: 
source_list = set(source_list).all()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
200-7961363

original snippet: 
list(OrderedDict.fromkeys('abracadabra'))
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id set))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (identifier-attr all))) (expr*-args) (keyword*-keywords))))))
predicted code: 
abracadabra = set(abracadabra).all()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
201-5183533

original snippet: 
numpy.array(a).reshape(-1).tolist()
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Name (identifier-id map))) (expr*-args (Name (identifier-id list)) (Call (expr-func (Name (identifier-id zip))) (expr*-args (Starred (expr-value (Name (identifier-id var_0))))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
a = map(list, zip(*a))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
202-5183533

original snippet: 
numpy.array(a)[0].tolist()
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id np))) (identifier-attr where))) (expr*-args (Name (identifier-id l))) (keyword*-keywords))))))
predicted code: 
a = np.where(l)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
203-5999747

original snippet: 
print(soup.find(text='Address:').findNext('td').contents[0])
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id f))) (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s str_1))) (keyword*-keywords))) (identifier-attr decode))) (expr*-args (Str (string-s utf8))) (keyword*-keywords))))))
predicted code: 
f = open('DirecciÃ³n:').decode('utf8')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
204-4284648

original snippet: 
""" """.join([('%d@%d' % t) for t in l])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id map))) (expr*-args (Name (identifier-id int)) (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr join))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id str))) (expr*-args (Name (identifier-id x))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
map(int, ''.join(str(x) for x in L))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
205-4284648

original snippet: 
""" """.join([('%d@%d' % (t[0], t[1])) for t in l])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Name (identifier-id str))) (expr*-args (Name (identifier-id x))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id s))) (expr-iter (Call (expr-func (Attribute (expr-value (Str (string-s str_0))) (identifier-attr join))) (expr*-args (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id var_0)) (Name (identifier-id b))) (keyword*-keywords))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[str(x) for s in '@'.join(zip(L, b))]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
206-26809954

original snippet: 
driver.execute_script('return document.documentElement.outerHTML;')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id driver))) (identifier-attr stat))) (expr*-args) (keyword*-keywords))) (identifier-attr clear))) (expr*-args) (keyword*-keywords))))))
predicted code: 
driver.stat().clear()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
207-29696641

original snippet: 
[i for i in teststr if re.search('\\d+[xX]', i)]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr join))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id str))) (expr*-args (Name (identifier-id x))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
"""""".join(str(x) for x in teststr)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
208-15315452

original snippet: 
df['A'][(df['B'] > 50) & (df['C'] == 900)]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (Str (string-s str_0))))))))))
predicted code: 
df['A']
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
209-4642501

original snippet: 
sorted(o.items())
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr upper)))) (keyword (identifier?-arg reverse) (expr-value (NameConstant (singleton-value True))))))))))
predicted code: 
sorted(o, key=o.upper, reverse='True')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
210-4642501

original snippet: 
sorted(d)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Name (identifier-id i))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id d))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs)) (comprehension (expr-target (Tuple (expr*-elts (Name (identifier-id k)) (Name (identifier-id v))))) (expr-iter (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr items))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[i for d in d for k, v in list(d.items())]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
211-642154

original snippet: 
int('1')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id int))) (expr*-args (Str (string-s str_0)) (Num (object-n 2))) (keyword*-keywords))))))
predicted code: 
int('1', 2)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
212-642154

original snippet: 
int()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id dict))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id float))) (expr*-args (Name (identifier-id x))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id convierten))) (identifier-attr split))) (expr*-args) (keyword*-keywords))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
dict(float(x) for x in convierten.split())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
213-642154

original snippet: 
T2 = [map(int, x) for x in T1]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id l))) (expr-value (Call (expr-func (Name (identifier-id next))) (expr*-args (Call (expr-func (Name (identifier-id range))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
l = next(range(T1))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
214-3777301

original snippet: 
subprocess.call(['./test.sh'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id subprocess))) (identifier-attr call))) (expr*-args (List (expr*-elts (Str (string-s str_0)) (Str (string-s str_0))))) (keyword*-keywords))))))
predicted code: 
subprocess.call(['. / test.sh', '. / test.sh'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
215-3777301

original snippet: 
subprocess.call(['notepad'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id subprocess))) (identifier-attr call))) (expr*-args (List (expr*-elts (Str (string-s var_0)) (Str (string-s .))))) (keyword*-keywords))))))
predicted code: 
subprocess.call(['notepad', '.'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
216-7946798

original snippet: 
[val for pair in zip(l1, l2) for val in pair]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr sort))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id operator))) (identifier-attr itemgetter))) (expr*-args (Num (object-n 1))) (keyword*-keywords))))))))))
predicted code: 
l1.sort(key=operator.itemgetter(1))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
217-8908287

original snippet: 
encoded = base64.b64encode('data to be encoded')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id s))) (identifier-attr decode))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
s.decode('de datos a codificar')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
218-8908287

original snippet: 
encoded = 'data to be encoded'.encode('ascii')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id astr_1))) (identifier-attr encode))) (expr*-args (Str (string-s str_0)) (Str (string-s ignore))) (keyword*-keywords))))))
predicted code: 
astr_1.encode('datos que se encoded', 'ignore')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
219-7856296

original snippet: 
lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\t'))
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id l))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id json))) (identifier-attr read_csv))) (expr*-args (Str (string-s str_0))) (keyword*-keywords (keyword (identifier?-arg delimiter) (expr-value (Str (string-s ,))))))))))
predicted code: 
l = json.read_csv('text.txt', delimiter=',')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
220-9035479

original snippet: 
getattr(my_object, my_str)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id getattr))) (expr*-args (Name (identifier-id x)) (Name (identifier-id x))) (keyword*-keywords))))))
predicted code: 
getattr(x, x)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
221-5558418

original snippet: 
print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id zip))) (expr*-args (Starred (expr-value (Call (expr-func (Name (identifier-id zip))) (expr*-args (Starred (expr-value (Name (identifier-id var_0))))) (keyword*-keywords))))) (keyword*-keywords))))))
predicted code: 
zip(*zip(*LD))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
222-14950260

original snippet: 
d = ast.literal_eval("{'code1':1,'code2':1}")
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Str (string-s Value))) (identifier-attr decode))) (expr*-args (Str (string-s unicode_escape))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print('Value'.decode('unicode_escape'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
223-11416772

original snippet: 
[word for word in mystring.split() if word.startswith('$')]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr findall))) (expr*-args (Str (string-s comienzan)) (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
re.findall('comienzan', mystring)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
224-11331982

original snippet: 
text = re.sub('^https?:\\/\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr strip))) (expr*-args) (keyword*-keywords))))))
predicted code: 
Text = Text.strip()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
225-34945274

original snippet: 
np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr pop))) (expr*-args) (keyword*-keywords))))))
predicted code: 
A.pop()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
226-15819980

original snippet: 
np.mean(a, axis=1)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sum))) (expr*-args (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id var_0)) (Name (identifier-id b))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
sum(zip(a, b))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
227-19894365

original snippet: 
subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id system))) (expr*-args) (keyword*-keywords))))))
predicted code: 
system()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
228-19894365

original snippet: 
subprocess.call('/usr/bin/Rscript --vanilla /pathto/MyrScript.r', shell=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr system))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
os.system('/ usr / bin / RSCRIPT --vanilla /pathto/MyrScript.r')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
229-15907200

original snippet: 
writer.writeheader()
predicted ast: 
(Module (stmt*-body (If (expr-test (Subscript (expr-value (Name (identifier-id self))) (slice-slice (Slice (expr?-lower) (expr?-upper) (expr?-step))))) (stmt*-body (Pass)) (stmt*-orelse))))
predicted code: 
if self[:]:
    pass
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
230-33058590

original snippet: 
df.fillna(df.mean(axis=1), axis=1)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id pd))) (identifier-attr concat))) (expr*-args (List (expr*-elts (Name (identifier-id var_0)) (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr mean))) (expr*-args) (keyword*-keywords))))) (keyword*-keywords))))))
predicted code: 
df = pd.concat([df, df.mean()])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
231-12400256

original snippet: 
time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id dict))) (expr*-args (Call (expr-func (Name (identifier-id score))) (expr*-args (Num (object-n 100)) (Num (object-n 2))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
dict(score(100, 2))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
232-1269217

original snippet: 
super(Derived, cls).do(a)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id derivadastr_0))) (expr*-args (Call (expr-func (Name (identifier-id derivadastr_0))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords)) (Name (identifier-id str_0))) (keyword*-keywords))))))
predicted code: 
derivadastr_0(derivadastr_0(do), Derived)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
233-23359886

original snippet: 
a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id session))) (identifier-attr query))) (expr*-args (Name (identifier-id str_0))) (keyword*-keywords))) (identifier-attr size))) (expr*-args) (keyword*-keywords))) (identifier-attr reset_index))) (expr*-args) (keyword*-keywords))))))
predicted code: 
session.query(a).size().reset_index()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
234-4383082

original snippet: 
re.split(' +', 'hello world sample text')
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id str_0))) (expr-value (ListComp (expr-elt (Call (expr-func (Attribute (expr-value (Name (identifier-id x))) (identifier-attr split))) (expr*-args (Str (string-s ))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
str_0 = [x.split('') for x in open('str_0')]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
235-14637696

original snippet: 
len(max(words, key=len))
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Name (identifier-id len))) (expr*-args (GeneratorExp (expr-elt (Name (identifier-id i))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs (Compare (expr-left (Name (identifier-id i))) (cmpop*-ops (IsNot)) (expr*-comparators (Name (identifier-id var_0))))))))) (keyword*-keywords))))))
predicted code: 
words = len(i for i in words if i is not words)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
236-3933478

original snippet: 
result[0]['from_user']
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (ListComp (expr-elt (Subscript (expr-value (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (Name (identifier-id k))))))) (slice-slice (Index (expr-value (Str (string-s name))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id k))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
print([result[k]['name'] for k in result])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
237-39112645

original snippet: 
[line.split() for line in open('File.txt')]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Attribute (expr-value (Name (identifier-id i))) (identifier-attr isdigit))) (expr*-args) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id line))) (expr-iter (Call (expr-func (Name (identifier-id range))) (expr*-args (Name (identifier-id str_0))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[i.isdigit() for line in range(Archivo.txt)]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
238-1031851

original snippet: 
res = dict((v, k) for k, v in a.items())
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sum))) (expr*-args (GeneratorExp (expr-elt (Tuple (expr*-elts (Name (identifier-id k)) (BinOp (expr-left (Name (identifier-id v))) (operator-op (Mult)) (expr-right (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (Name (identifier-id k))))))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id k))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
sum((k, v * a[k]) for k in a)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
239-8577137

original snippet: 
new_file = open('path/to/FILE_NAME.ext', 'w')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr system))) (expr*-args (Str (string-s dir))) (keyword*-keywords))))))
predicted code: 
os.system('dir')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
240-3735814

original snippet: 
any(key.startswith('EMP$$') for key in dict1)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id any))) (expr*-args (Call (expr-func (Name (identifier-id type))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
any(type(dict1))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
241-3735814

original snippet: 
[value for key, value in list(dict1.items()) if key.startswith('EMP$$')]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Tuple (expr*-elts (Name (identifier-id k)) (Name (identifier-id v))))) (comprehension*-generators (comprehension (expr-target (Tuple (expr*-elts (Name (identifier-id k)) (Name (identifier-id v))))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr items))) (expr*-args) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[(k, v) for k, v in dict1.items()]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
242-26097916

original snippet: 
pd.DataFrame({'email': sf.index, 'list': sf.values})
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr groupby))) (expr*-args (List (expr*-elts (Str (string-s str_1)) (Str (string-s str_0))))) (keyword*-keywords))))))
predicted code: 
sf.groupby(['', 'pandas df'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
243-4048964

original snippet: 
print('\t'.join(map(str, list)))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr join))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id str))) (expr*-args (Name (identifier-id x))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(''.join(str(x) for i in list))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
244-3182716

original snippet: 
print('\xd0\xbf\xd1\x80\xd0\xb8'.encode('raw_unicode_escape'))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Name (identifier-id decode))) (expr*-args (Str (string-s %Y-%m-%d))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(decode('%Y-%m-%d'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
245-3182716

original snippet: 
'Sopet\xc3\xb3n'.encode('latin-1').decode('utf-8')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id adecuadamente))) (identifier-attr adecuadamente))) (expr*-args (Str (string-s adecuadamente))) (keyword*-keywords))) (identifier-attr decode))) (expr*-args (Str (string-s utf-8))) (keyword*-keywords))) (identifier-attr encode))) (expr*-args (Str (string-s utf-8))) (keyword*-keywords))) (identifier-attr decode))) (expr*-args (Str (string-s utf-8))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(adecuadamente.adecuadamente('adecuadamente').decode('utf-8').encode(
    'utf-8').decode('utf-8'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
246-1405602

original snippet: 
image = image.resize((x, y), Image.ANTIALIAS)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id str_0))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id str_0))) (identifier-attr get))) (expr*-args (Str (string-s var_0))) (keyword*-keywords))))))
predicted code: 
(x, y) = (x, y).get('image')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
247-35622945

original snippet: 
re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr split))) (expr*-args (Str (string-s unicode-escape))) (keyword*-keywords))))))
predicted code: 
s.split('unicode-escape')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
248-5306756

original snippet: 
print('{0:.0f}%'.format(1.0 / 3 * 100))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id ord))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
ord('1/3 * 100')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
249-2878084

original snippet: 
mylist.sort(key=lambda x: x['title'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr get)))) (keyword (identifier?-arg reverse) (expr-value (NameConstant (singleton-value True))))))))))
predicted code: 
sorted(mylist, key=mylist.get, reverse='True')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
250-2878084

original snippet: 
l.sort(key=lambda x: x['title'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Subscript (expr-value (Name (identifier-id x))) (slice-slice (Index (expr-value (Num (object-n 1))))))))))))))))
predicted code: 
sorted(L, key=lambda x: x[1])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
251-2878084

original snippet: 
l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (List (expr*-elts (Str (string-s 10)) (Str (string-s str_0)) (Str (string-s str_2))))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Name (identifier-id float))))))))))
predicted code: 
sorted(['10', 'TÃ\xadtulo', 'id'], key=float)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
252-9323159

original snippet: 
heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Subscript (expr-value (Name (identifier-id item))) (slice-slice (Index (expr-value (Name (identifier-id i))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Name (identifier-id l1str_1))) (expr*-ifs))))))))
predicted code: 
[item[i] for i in l1str_1]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
253-29877663

original snippet: 
soup.find_all('span', {'class': 'starGryB sp'})
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id urllib))) (identifier-attr parse))) (identifier-attr urlopen))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (identifier-attr decode))) (expr*-args (Str (string-s utf-8))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(urllib.parse.urlopen(soup).decode('utf-8'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
254-24189150

original snippet: 
df.to_sql('test', engine, schema='a_schema')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr to_csv))) (expr*-args (Str (string-s clear))) (keyword*-keywords (keyword (identifier?-arg cols) (expr-value (NameConstant (singleton-value False))))))))))
predicted code: 
df.to_csv('clear', cols='False')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
255-30766151

original snippet: 
brackets = re.sub('[^(){}[\\]]', '', s)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Subscript (expr-value (Name (identifier-id i))) (slice-slice (Index (expr-value (Num (object-n 0))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr split))) (expr*-args) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[i[0] for i in s.split()]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
256-1143379

original snippet: 
list(dict((x[0], x) for x in L).values())
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Name (identifier-id set))) (expr*-args (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id str_0)) (Name (identifier-id str_0))) (keyword*-keywords))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
list(set(zip(L, L)))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
257-12330522

original snippet: 
[line.rstrip('\n') for line in file]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id str_0))) (expr-value (Call (expr-func (Name (identifier-id next))) (expr*-args (Call (expr-func (Name (identifier-id un))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
str_0 = next(un(file))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
258-364621

original snippet: 
[i for (i, x) in enumerate(testlist) if (x == 1)]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr communicate))) (expr*-args) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 0))))))))))
predicted code: 
testlist.communicate()[0]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
259-364621

original snippet: 
[i for (i, x) in enumerate(testlist) if (x == 1)]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr communicate))) (expr*-args) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 0))))))))))
predicted code: 
testlist.communicate()[0]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
260-364621

original snippet: 
for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:
    pass
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr communicate))) (expr*-args) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 0))))))))))
predicted code: 
testlist.communicate()[0]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
261-364621

original snippet: 
for i in (i for (i, x) in enumerate(testlist) if (x == 1)):
    pass
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr communicate))) (expr*-args) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 0))))))))))
predicted code: 
testlist.communicate()[0]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
262-364621

original snippet: 
gen = (i for (i, x) in enumerate(testlist) if (x == 1))
for i in gen:
    pass
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr communicate))) (expr*-args) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 0))))))))))
predicted code: 
testlist.communicate()[0]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
263-364621

original snippet: 
print(testlist.index(element))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (ListComp (expr-elt (Subscript (expr-value (Name (identifier-id item))) (slice-slice (Index (expr-value (Str (string-s Name))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id item))) (expr-iter (Name (identifier-id elementstr_1))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
print([item['Name'] for item in elementstr_1])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
264-364621

original snippet: 
try:
    print(testlist.index(element))
except ValueError:
    pass
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (ListComp (expr-elt (Subscript (expr-value (Name (identifier-id item))) (slice-slice (Index (expr-value (Str (string-s Name))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id item))) (expr-iter (Name (identifier-id elementstr_1))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
print([item['Name'] for item in elementstr_1])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
265-13145368

original snippet: 
max(lis, key=lambda item: item[1])[0]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (Num (object-n 0))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Name (identifier-id b))) (expr*-ifs))))))))
predicted code: 
[lis[0] for x in b]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
266-13145368

original snippet: 
max(lis, key=itemgetter(1))[0]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id new_list))) (expr-value (Call (expr-func (Name (identifier-id max))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Subscript (expr-value (Name (identifier-id x))) (slice-slice (Index (expr-value (Num (object-n 1))))))))))))))))
predicted code: 
new_list = max(lis, key=lambda x: x[1])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
267-2689189

original snippet: 
time.sleep(1)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sleep))) (expr*-args (Num (object-n 1))) (keyword*-keywords))))))
predicted code: 
sleep(1)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
268-12485244

original snippet: 
""", """.join('(' + ', '.join(i) + ')' for i in L)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id map))) (expr*-args (Name (identifier-id int)) (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr join))) (expr*-args (ListComp (expr-elt (Call (expr-func (Name (identifier-id str))) (expr*-args (Name (identifier-id i))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
map(int, ''.join([str(i) for i in L]))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
269-755857

original snippet: 
b = models.CharField(max_length=7, default='0000000', editable=False)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id request))) (identifier-attr POST))) (identifier-attr merge))) (expr*-args (Str (string-s str_1)) (Str (string-s str_1))) (keyword*-keywords))))))
predicted code: 
request.POST.merge('0000000', '0000000')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
270-16193578

original snippet: 
sorted(list5, lambda x: (degree(x), x))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Subscript (expr-value (Name (identifier-id x))) (slice-slice (Index (expr-value (Num (object-n 1))))))))))))))))
predicted code: 
sorted(list, key=lambda x: x[1])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
271-16041405

original snippet: 
(n for n in [1, 2, 3, 5])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Name (identifier-id set))) (expr*-args (Num (object-n 10)) (Num (object-n 2))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
list(set(10, 2))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
272-18837607

original snippet: 
newlist = [v for i, v in enumerate(oldlist) if i not in removelist]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Name (identifier-id x))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs (Compare (expr-left (Subscript (expr-value (Name (identifier-id str_0))) (slice-slice (Index (expr-value (Num (object-n 0))))))) (cmpop*-ops (Eq)) (expr*-comparators (Num (object-n 0))))))))))))
predicted code: 
[x for x in oldlist if removelist[0] == 0]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
273-4710067

original snippet: 
f = open('yourfile.txt', 'w')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr system))) (expr*-args (Str (string-s dir))) (keyword*-keywords))))))
predicted code: 
os.system('dir')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
274-7373219

original snippet: 
getattr(obj, 'attr')
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id requests))) (identifier-attr post))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
obj = requests.post('attr')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
275-8171751

original snippet: 
from functools import reduce
reduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id str_0)) (Name (identifier-id a))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
list(zip((( 'aa',), ( 'BB',), ( 'CC',)), a))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
276-8171751

original snippet: 
map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Name (identifier-id zip))) (expr*-args (Starred (expr-value (List (expr*-elts (Name (identifier-id str_0))))))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
list(zip(*[(( 'aa',), ( 'BB',), ( 'CC',))]))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
277-19339

original snippet: 
zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id a)) (Name (identifier-id b))) (keyword*-keywords))))))
predicted code: 
zip(a, b)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
278-19339

original snippet: 
zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id a)) (Name (identifier-id b))) (keyword*-keywords))))))
predicted code: 
zip(a, b)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
279-19339

original snippet: 
result = ([a for (a, b) in original], [b for (a, b) in original])
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (ListComp (expr-elt (Name (identifier-id i))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Call (expr-func (Name (identifier-id range))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
original = [i for i in range(original)]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
280-19339

original snippet: 
result = ((a for (a, b) in original), (b for (a, b) in original))
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id f))) (expr-value (Call (expr-func (Name (identifier-id map))) (expr*-args (Name (identifier-id int)) (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr count))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
f = map(int, original.count())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
281-19339

original snippet: 
zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Name (identifier-id range))) (expr*-args (Num (object-n 10))) (keyword*-keywords))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(list(range(10)))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
282-19339

original snippet: 
map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id urllib))) (identifier-attr request))) (identifier-attr urlopen))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr start))) (expr*-args) (keyword*-keywords))))))
predicted code: 
urllib.request.urlopen("[( 'a', 1), ( 'b', 2), ( 'c', 3), ( 'd', 4), ( 'e',)]"
    ).start()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
283-1960516

original snippet: 
json.dumps(Decimal('3.9'))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id json))) (identifier-attr load))) (expr*-args (Call (expr-func (Attribute (expr-value (Str (string-s -SPACE-))) (identifier-attr join))) (expr*-args (Name (identifier-id json))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
json.load(' '.join(json))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
284-1024847

original snippet: 
d['mynewkey'] = 'mynewvalue'
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (Str (string-s str_0))))))) (expr-value (Str (string-s str_2))))))
predicted code: 
d['mynewkey'] = 'str_2'
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
285-1024847

original snippet: 
data.update({'a': 1, })
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id call))) (expr*-args (List (expr*-elts (Str (string-s str_0)) (Str (string-s str_0)) (Str (string-s 1))))) (keyword*-keywords))))))
predicted code: 
call(['a', 'a', '1'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
286-1024847

original snippet: 
data.update(dict(a=1))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id call))) (expr*-args (List (expr*-elts (Str (string-s str_0)) (Str (string-s str_0)) (Str (string-s 1))))) (keyword*-keywords))))))
predicted code: 
call(['a', 'a', '1'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
287-1024847

original snippet: 
data.update(a=1)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id call))) (expr*-args (List (expr*-elts (Str (string-s str_0)) (Str (string-s str_0)) (Str (string-s 1))))) (keyword*-keywords))))))
predicted code: 
call(['a', 'a', '1'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
288-35837346

original snippet: 
max([max(i) for i in matrix])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Name (identifier-id max))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Subscript (expr-value (Name (identifier-id x))) (slice-slice (Index (expr-value (Num (object-n 1))))))))))))) (keyword*-keywords))))))
predicted code: 
print(max(matrix, key=lambda x: x[1]))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
289-20457038

original snippet: 
answer = str(round(answer, 2))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id round))) (expr*-args (Call (expr-func (Name (identifier-id round))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
round(round(answer))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
290-2890896

original snippet: 
ip = re.findall('[0-9]+(?:\\.[0-9]+){3}', s)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr strip))) (expr*-args) (keyword*-keywords))))))
predicted code: 
var_0.strip()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
291-29836836

original snippet: 
df.groupby('A').filter(lambda x: len(x) > 1)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr reset_index))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg axis) (expr-value (Num (object-n 0))))))))))
predicted code: 
df.reset_index(axis=0)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
292-2545397

original snippet: 
[x for x in myfile.splitlines() if x != '']
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s 
))) (identifier-attr join))) (expr*-args (Call (expr-func (Name (identifier-id append))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
myfile = '\n'.join(append(myfile))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
293-2545397

original snippet: 
lst = map(int, open('filename.txt').readlines())
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (ListComp (expr-elt (ListComp (expr-elt (Name (identifier-id i))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Call (expr-func (Name (identifier-id range))) (expr*-args (Num (object-n 0))) (keyword*-keywords))) (expr*-ifs))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Call (expr-func (Name (identifier-id range))) (expr*-args (Num (object-n 0)) (Call (expr-func (Name (identifier-id len))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords)) (Name (identifier-id n))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
lst = [[i for i in range(0)] for i in range(0, len(lst), n)]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
294-35420052

original snippet: 
plt.colorbar(mappable=mappable, cax=ax3)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id str_0))) (expr-value (Subscript (expr-value (Name (identifier-id color))) (slice-slice (Slice (expr?-lower) (expr?-upper) (expr?-step (Str (string-s str_0))))))))))
predicted code: 
= color[::'']
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
295-29903025

original snippet: 
Counter(' '.join(df['text']).split()).most_common(100)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr columns))) (identifier-attr merge))) (expr*-args (Str (string-s str_0)) (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
df = df.columns.merge('texto', 'texto')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
296-7378180

original snippet: 
list(itertools.combinations((1, 2, 3), 2))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id all))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id type))) (expr*-args (Name (identifier-id word))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Name (identifier-id str_0))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
all(type(word) for i in (1, 2, 3))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
297-4530069

original snippet: 
datetime.now(pytz.utc)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Name (identifier-id max))) (expr*-args (Name (identifier-id a))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(max(a))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
298-4842956

original snippet: 
list2 = [x for x in list1 if x != []]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (List (expr*-elts (Name (identifier-id retirar))))) (keyword*-keywords))))))
predicted code: 
list([retirar])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
299-4842956

original snippet: 
list2 = [x for x in list1 if x]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_1))) (expr-value (ListComp (expr-elt (BinOp (expr-left (Name (identifier-id i))) (operator-op (Add)) (expr-right (Name (identifier-id b))))) (comprehension*-generators (comprehension (expr-target (Tuple (expr*-elts (Name (identifier-id i)) (Name (identifier-id b))))) (expr-iter (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id var_0)) (Name (identifier-id b))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
list1 = [(i + b) for i, b in zip(list2, b)]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
300-9262278

original snippet: 
return HttpResponse(data, mimetype='application/json')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr objects))) (identifier-attr filter))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg) (expr-value (Str (string-s var_0))))))))))
predicted code: 
data.objects.filter(**'data')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
301-17284947

original snippet: 
re.findall('(.*?)\\[.*?\\]', example_str)
predicted ast: 
(Module (stmt*-body (Return (expr?-value (Name (identifier-id text))))))
predicted code: 
return text
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
302-17284947

original snippet: 
re.findall('(.*?)(?:\\[.*?\\]|$)', example_str)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Name (identifier-id re))) (expr*-args (Name (identifier-id i))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr split))) (expr*-args) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[re(i) for i in example_str.split()]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
303-14182339

original snippet: 
re.findall('\\(.+?\\)|\\w', '(zyx)bc')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id sys))) (identifier-attr path))) (identifier-attr insert))) (expr*-args (Num (object-n 0)) (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
sys.path.insert(0, '(ZYX) bc')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
304-14182339

original snippet: 
re.findall('\\((.*?)\\)|(\\w)', '(zyx)bc')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id str_1))) (identifier-attr split))) (expr*-args (Str (string-s str_0)) (Str (string-s ignore))) (keyword*-keywords))))))
predicted code: 
(ZYX) bc.split('\\ ((*) \\.?) | (\\ w)', 'ignore')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
305-14182339

original snippet: 
re.findall('\\(.*?\\)|\\w', '(zyx)bc')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr findall))) (expr*-args (List (expr*-elts (Str (string-s a)) (Str (string-s str_1))))) (keyword*-keywords))))))
predicted code: 
re.findall(['a', 'en una cadena (ZYX) bc'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
306-7126916

original snippet: 
elements = ['%{0}%'.format(element) for element in elements]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Attribute (expr-value (Name (identifier-id x))) (identifier-attr split))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id s))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))))))
predicted code: 
[x.split('%} {% 0') for s in elements]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
307-3595685

original snippet: 
subprocess.Popen(['background-process', 'arguments'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id file))) (identifier-attr input))) (expr*-args (Str (string-s date))) (keyword*-keywords))) (identifier-attr date))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(file.input('date').date())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
308-18453566

original snippet: 
[mydict[x] for x in mykeys]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Subscript (expr-value (Name (identifier-id d))) (slice-slice (Index (expr-value (Str (string-s Name))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id item))) (expr-iter (Name (identifier-id str_1))) (expr*-ifs))))))))
predicted code: 
[d['Name'] for item in ]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
309-12692135

original snippet: 
dict([('Name', 'Joe'), ('Age', 22)])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id dict))) (expr*-args (GeneratorExp (expr-elt (Tuple (expr*-elts (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id a))) (identifier-attr lower))) (expr*-args (Num (object-n 0))) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 0))))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id k))) (expr-iter (Name (identifier-id 22))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
dict((a.lower(0)[0],) for k in 22)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
310-14401047

original snippet: 
data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Name (identifier-id x))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id var_0)) (Name (identifier-id b))) (keyword*-keywords))) (expr*-ifs (Call (expr-func (Name (identifier-id set))) (expr*-args (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id len)) (Name (identifier-id b))) (keyword*-keywords))) (keyword*-keywords))))))))))
predicted code: 
[x for x in zip(data, b) if set(zip(len, b))]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
311-18886596

original snippet: 
print(s.encode('unicode-escape').replace('"', '\\"'))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr join))) (expr*-args (GeneratorExp (expr-elt (Name (identifier-id c))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id c))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs (Call (expr-func (Attribute (expr-value (Name (identifier-id c))) (identifier-attr isdigit))) (expr*-args) (keyword*-keywords))))))) (keyword*-keywords))))))
predicted code: 
"""""".join(c for c in s if c.isdigit())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
312-5932059

original snippet: 
re.split('(\\W+)', s)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id text))) (identifier-attr read))) (expr*-args) (keyword*-keywords))) (identifier-attr split))) (expr*-args (Str (string-s ,))) (keyword*-keywords))) (identifier-attr split))) (expr*-args (Str (string-s ,-SPACE-))) (keyword*-keywords))))))
predicted code: 
text.read().split(',').split(', ')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
313-35945473

original snippet: 
{i[1]: i[0] for i in list(myDictionary.items())}
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id dict))) (expr*-args (GeneratorExp (expr-elt (Tuple (expr*-elts (Name (identifier-id v)) (Name (identifier-id k))))) (comprehension*-generators (comprehension (expr-target (Tuple (expr*-elts (Name (identifier-id k)) (Name (identifier-id v))))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr items))) (expr*-args) (keyword*-keywords))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
dict((v, k) for k, v in myDictionary.items())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
314-30729735

original snippet: 
[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (List (expr*-elts (Num (object-n 1))))))))
predicted code: 
[1]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
315-1303243

original snippet: 
isinstance(obj, str)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Compare (expr-left (Call (expr-func (Name (identifier-id var_0))) (expr*-args (Name (identifier-id n))) (keyword*-keywords))) (cmpop*-ops (Eq)) (expr*-comparators (Subscript (expr-value (Call (expr-func (Name (identifier-id var_0))) (expr*-args) (keyword*-keywords))) (slice-slice (Slice (expr?-lower) (expr?-upper) (expr?-step (UnaryOp (unaryop-op (USub)) (expr-operand (Num (object-n 1))))))))))))))
predicted code: 
obj(n) == obj()[::-1]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
316-1303243

original snippet: 
isinstance(o, str)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Compare (expr-left (Call (expr-func (Name (identifier-id var_0))) (expr*-args (Name (identifier-id n))) (keyword*-keywords))) (cmpop*-ops (Eq)) (expr*-comparators (Subscript (expr-value (Call (expr-func (Name (identifier-id var_0))) (expr*-args) (keyword*-keywords))) (slice-slice (Slice (expr?-lower) (expr?-upper) (expr?-step (UnaryOp (unaryop-op (USub)) (expr-operand (Num (object-n 1))))))))))))))
predicted code: 
o(n) == o()[::-1]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
317-1303243

original snippet: 
(type(o) is str)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Compare (expr-left (Call (expr-func (Name (identifier-id var_0))) (expr*-args (Name (identifier-id n))) (keyword*-keywords))) (cmpop*-ops (Eq)) (expr*-comparators (Subscript (expr-value (Call (expr-func (Name (identifier-id var_0))) (expr*-args) (keyword*-keywords))) (slice-slice (Slice (expr?-lower) (expr?-upper) (expr?-step (UnaryOp (unaryop-op (USub)) (expr-operand (Num (object-n 1))))))))))))))
predicted code: 
o(n) == o()[::-1]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
318-1303243

original snippet: 
isinstance(o, str)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Compare (expr-left (Call (expr-func (Name (identifier-id var_0))) (expr*-args (Name (identifier-id n))) (keyword*-keywords))) (cmpop*-ops (Eq)) (expr*-comparators (Subscript (expr-value (Call (expr-func (Name (identifier-id var_0))) (expr*-args) (keyword*-keywords))) (slice-slice (Slice (expr?-lower) (expr?-upper) (expr?-step (UnaryOp (unaryop-op (USub)) (expr-operand (Num (object-n 1))))))))))))))
predicted code: 
o(n) == o()[::-1]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
319-1303243

original snippet: 
isinstance(obj_to_test, str)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id isinstance))) (expr*-args (Name (identifier-id var_0)) (Name (identifier-id int))) (keyword*-keywords))))))
predicted code: 
isinstance(obj_to_test, int)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
320-8177079

original snippet: 
list2.extend(list1)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id df))) (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id str_1))) (identifier-attr startswith))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
df = list(a list2.startswith())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
321-8177079

original snippet: 
list1.extend(mylog)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id df))) (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id str_1))) (identifier-attr startswith))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
df = list(a list1.startswith())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
322-8177079

original snippet: 
c.extend(a)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id str_0))) (expr-value (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s c))) (keyword*-keywords))))))
predicted code: 
= open('c')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
323-8177079

original snippet: 
for line in mylog:
    list1.append(line)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id a)) (Name (identifier-id mylogstr_1))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
list(zip(a, mylogstr_1))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
324-4126227

original snippet: 
b.append((a[0][0], a[0][2]))
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Name (identifier-id zip))) (expr*-args (Starred (expr-value (Name (identifier-id var_0))))) (keyword*-keywords))))))
predicted code: 
a = zip(*a)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
325-34902378

original snippet: 
app.config['SECRET_KEY'] = 'Your_secret_string'
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id r))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr find_element_by_css_selector))) (expr*-args (Str (string-s var_0))) (keyword*-keywords))))))
predicted code: 
r = os.find_element_by_css_selector('SECRET_KEY')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
326-22799300

original snippet: 
pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id df))) (identifier-attr to_csv))) (expr*-args (Str (string-s str_0))) (keyword*-keywords (keyword (identifier?-arg axis) (expr-value (Num (object-n 1)))) (keyword (identifier?-arg inplace) (expr-value (NameConstant (singleton-value True))))))))))
predicted code: 
df.to_csv('out-1', axis=1, inplace='True')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
327-1762484

original snippet: 
[x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Subscript (expr-value (Name (identifier-id i))) (slice-slice (Index (expr-value (Num (object-n 0))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))))))
predicted code: 
[i[0] for x in stocks_list]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
328-3464359

original snippet: 
ax.set_xticklabels(labels, rotation=45)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id plt))) (identifier-attr plot))) (expr*-args (Subscript (expr-value (Attribute (expr-value (Name (identifier-id str_1))) (identifier-attr columns))) (slice-slice (Index (expr-value (Str (string-s str_0)))))) (Name (identifier-id str_1))) (keyword*-keywords))))))
predicted code: 
plt.plot(ax.columns[''], ax)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
329-875968

original snippet: 
re.sub('[^\\w]', ' ', s)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr strip))) (expr*-args) (keyword*-keywords))))))
predicted code: 
s.strip()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
330-31258561

original snippet: 
os.path.basename(os.path.dirname(os.path.realpath(__file__)))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr getcwd))) (expr*-args) (keyword*-keywords))))))
predicted code: 
os.getcwd()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
331-34750084

original snippet: 
print(re.findall("'\\\\[0-7]{1,3}'", str))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id text))) (identifier-attr read))) (expr*-args) (keyword*-keywords))))))
predicted code: 
text.read()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
332-13209288

original snippet: 
re.split('[ ](?=[A-Z]+\\b)', input)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr split))) (expr*-args (Str (string-s str_0)) (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
re.split('[] (? = [A-Z] + \\ b)', input)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
333-13209288

original snippet: 
re.split('[ ](?=[A-Z])', input)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr strip))) (expr*-args) (keyword*-keywords))))))
predicted code: 
input.strip()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
334-24642040

original snippet: 
r = requests.post(url, files=files, headers=headers, data=data)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr open))) (expr*-args (Str (string-s codificado))) (keyword*-keywords))))))
predicted code: 
files.open('codificado')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
335-4290716

original snippet: 
open('filename', 'wb').write(bytes_)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id webbrowser))) (identifier-attr open))) (expr*-args (Str (string-s %Y-%m-%d))) (keyword*-keywords))))))
predicted code: 
webbrowser.open('%Y-%m-%d')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
336-33078554

original snippet: 
[dct[k] for k in lst]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Name (identifier-id y))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Name (identifier-id str_0))) (expr*-ifs)) (comprehension (expr-target (Name (identifier-id y))) (expr-iter (Name (identifier-id str_0))) (expr*-ifs))))))))
predicted code: 
[y for x in dct for y in dct]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
337-15247628

original snippet: 
x.set_index('name').index.get_duplicates()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr groupby))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr var_0))) (expr*-args) (keyword*-keywords))))))
predicted code: 
x.groupby('nombre').x()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
338-783897

original snippet: 
round(1.923328437452, 3)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s {0:.2f}))) (identifier-attr format))) (expr*-args (Num (object-n 3))) (keyword*-keywords))))))
predicted code: 
"""{0:.2f}""".format(3)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
339-22859493

original snippet: 
sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr sort))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Subscript (expr-value (Name (identifier-id x))) (slice-slice (Index (expr-value (Num (object-n 1))))))))))))))))
predicted code: 
li.sort(key=lambda x: x[1])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
340-29394552

original snippet: 
ax.set_rlabel_position(135)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr open))) (expr*-args (Str (string-s grados))) (keyword*-keywords))))))
predicted code: 
ax = ax.open('grados')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
341-3320406

original snippet: 
os.path.isabs(my_path)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id len))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
len(my_path)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
342-2212433

original snippet: 
len(list(yourdict.keys()))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sum))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id len))) (expr*-args (Name (identifier-id x))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr values))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
sum(len(x) for x in list(yourdict.values()))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
343-2212433

original snippet: 
len(set(open(yourdictfile).read().split()))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sum))) (expr*-args (GeneratorExp (expr-elt (Compare (expr-left (Name (identifier-id x))) (cmpop*-ops (Eq)) (expr*-comparators (Name (identifier-id b))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id k))) (expr-iter (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr values))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
sum(x == b for k in list(yourdictfile.values()))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
344-20067636

original snippet: 
df.groupby('id').first()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id df))) (identifier-attr to_csv))) (expr*-args (Str (string-s A))) (keyword*-keywords (keyword (identifier?-arg axis) (expr-value (Num (object-n 1))))))))))
predicted code: 
df.to_csv('A', axis=1)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
345-40924332

original snippet: 
pd.concat([df[0].apply(pd.Series), df[1]], axis=1)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id df))) (identifier-attr groupby))) (expr*-args (List (expr*-elts (Str (string-s year)) (Str (string-s date))))) (keyword*-keywords (keyword (identifier?-arg axis) (expr-value (Num (object-n 1))))))) (slice-slice (Index (expr-value (Str (string-s date))))))) (identifier-attr tolist))) (expr*-args) (keyword*-keywords))))))
predicted code: 
df.groupby(['year', 'date'], axis=1)['date'].tolist()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
346-30759776

original snippet: 
re.findall('src="js/([^"]*\\bjquery\\b[^"]*)"', data)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Set (expr*-elts (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr upper))) (expr*-args) (keyword*-keywords))))))))
predicted code: 
{data.upper()}
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
347-25388796

original snippet: 
sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Name (identifier-id map))) (expr*-args (Name (identifier-id int)) (Call (expr-func (Attribute (expr-value (Name (identifier-id s))) (identifier-attr split))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id s))) (expr-iter (Name (identifier-id str_0))) (expr*-ifs))))))))
predicted code: 
[map(int, s.split("[ '', '3.4', '', '', '1,0']")) for s in
    [ '', '3.4', '', '', '1,0']]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
348-804995

original snippet: 
subprocess.Popen(['c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id subprocess))) (expr*-args (Str (string-s echo-SPACE-Hello-SPACE-World))) (keyword*-keywords (keyword (identifier?-arg shell) (expr-value (NameConstant (singleton-value True))))))))))
predicted code: 
subprocess('echo Hello World', shell='True')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
349-26441253

original snippet: 
q.put((-n, n))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id var_0))) (expr*-args (Str (string-s var_0))) (keyword*-keywords))))))
predicted code: 
q('q')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
350-18897261

original snippet: 
df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id color))) (identifier-attr head))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
color.head(df)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
351-373194

original snippet: 
re.findall('([a-fA-F\\d]{32})', data)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr join))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr findall))) (expr*-args (Starred (expr-value (Name (identifier-id var_0))))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
"""""".join(re.findall(*data))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
352-518021

original snippet: 
len(my_list)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id len))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
len(my_list)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
353-518021

original snippet: 
len(l)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id set))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (identifier-attr count))) (expr*-args) (keyword*-keywords))))))
predicted code: 
set(l).count()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
354-518021

original snippet: 
len(s)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id set))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (identifier-attr count))) (expr*-args) (keyword*-keywords))))))
predicted code: 
set(s).count()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
355-518021

original snippet: 
len(my_tuple)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id f))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr choice))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
f = os.choice(my_tuple)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
356-518021

original snippet: 
len(my_string)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id f))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr choice))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
f = os.choice(my_string)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
357-40452956

original snippet: 
"""\\a""".decode('string_escape')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s str_0))) (identifier-attr strip))) (expr*-args) (keyword*-keywords))))))
predicted code: 
"""\\ un""".strip()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
358-8687018

original snippet: 
"""obama""".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s str_1))) (identifier-attr replace))) (expr*-args (Str (string-s str_4)) (Str (string-s str_1))) (keyword*-keywords))))))
predicted code: 
"""b""".replace('Obama', 'b')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
359-303200

original snippet: 
shutil.rmtree('/folder_name')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id urllib))) (identifier-attr request))) (identifier-attr urlopen))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr plot))) (expr*-args) (keyword*-keywords))))))
predicted code: 
urllib.request.urlopen('/ nombre_carpeta').plot()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
360-13740672

original snippet: 
data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (Str (string-s var_0))))))) (expr-value (BinOp (expr-left (Subscript (expr-value (Name (identifier-id str_0))) (slice-slice (Index (expr-value (Str (string-s var_1))))))) (operator-op (Div)) (expr-right (Subscript (expr-value (Name (identifier-id str_0))) (slice-slice (Index (expr-value (Str (string-s var_1))))))))))))
predicted code: 
weekday['weekday'] = data['my_dt'] / data['my_dt']
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
361-20950650

original snippet: 
sorted(x, key=x.get, reverse=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr sort))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg) (expr-value (NameConstant (singleton-value True))))))))))
predicted code: 
x.sort(**'True')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
362-20950650

original snippet: 
sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id var_0))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg) (expr-value (Call (expr-func (Name (identifier-id itemgetter))) (expr*-args (Num (object-n 1))) (keyword*-keywords))))))))))
predicted code: 
x(**itemgetter(1))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
363-9775297

original snippet: 
np.vstack((a, b))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id np))) (identifier-attr append))) (expr*-args (Name (identifier-id a)) (Name (identifier-id b))) (keyword*-keywords))))))
predicted code: 
np.append(a, b)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
364-21887754

original snippet: 
print(concatenate((a, b), axis=0))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id numpy))) (identifier-attr concatenate))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
numpy.concatenate(a)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
365-21887754

original snippet: 
print(concatenate((a, b), axis=1))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id numpy))) (identifier-attr concatenate))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
numpy.concatenate(a)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
366-21887754

original snippet: 
c = np.r_[(a[None, :], b[None, :])]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id numpy))) (identifier-attr concatenate))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
numpy.concatenate(a)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
367-21887754

original snippet: 
np.array((a, b))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id numpy))) (identifier-attr concatenate))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
numpy.concatenate(a)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
368-2805231

original snippet: 
print(socket.getaddrinfo('google.com', 80))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id str_0))) (identifier-attr find))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr reset_index))) (expr*-args) (keyword*-keywords))))))
predicted code: 
google.com.find('google.com').reset_index()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
369-17552997

original snippet: 
df.xs('sat', level='day', drop_level=False)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Subscript (expr-value (Attribute (expr-value (Name (identifier-id df))) (identifier-attr iloc))) (slice-slice (Index (expr-value (Str (string-s str_0))))))) (expr-value (Str (string-s str_1))))))
predicted code: 
df.iloc['dÃ\xada'] = 'sentado'
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
370-4356842

original snippet: 
return HttpResponse('Unauthorized', status=401)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id str_0))) (identifier-attr objects))) (identifier-attr order_by))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
str_0.objects.order_by('str_0')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
371-13598363

original snippet: 
Flask(__name__, template_folder='wherever')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id webbrowser))) (identifier-attr post))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
webbrowser.post('donde')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
372-1849375

original snippet: 
session.execute('INSERT INTO t1 (SELECT * FROM t2)')
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id a))) (expr-value (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s A))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr split))) (expr*-args (Str (string-s *))) (keyword*-keywords))))))))))
predicted code: 
a = open('A', key=re.split('*'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
373-3398589

original snippet: 
c2.sort(key=lambda row: row[2])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Name (identifier-id x))) (comprehension*-generators (comprehension (expr-target (Tuple (expr*-elts (Name (identifier-id i)) (Name (identifier-id j))))) (expr-iter (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id lo)) (Name (identifier-id b))) (keyword*-keywords))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[x for i, j in sorted(zip(lo, b))]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
374-10960463

original snippet: 
matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s plt))) (identifier-attr encode))) (expr*-args (Str (string-s utf-8))) (keyword*-keywords))))))
predicted code: 
"""plt""".encode('utf-8')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
375-20576618

original snippet: 
df['date'].apply(lambda x: x.toordinal())
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id df))) (identifier-attr strptime))) (expr*-args (Str (string-s str_0)) (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
df.strptime('fecha', 'fecha')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
376-7263824

original snippet: 
element.get_attribute('innerHTML')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id os))) (identifier-attr objects))) (identifier-attr all))) (expr*-args) (keyword*-keywords))) (identifier-attr click))) (expr*-args) (keyword*-keywords))))))
predicted code: 
os.objects.all().click()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
377-31793195

original snippet: 
df.index.get_loc('bob')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (Str (string-s b))))))))))
predicted code: 
bob['b']
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
378-7574841

original snippet: 
os.system('gnome-terminal -e \'bash -c "sudo apt-get update; exec bash"\'')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id os))) (identifier-attr path))) (identifier-attr join))) (expr*-args (Str (string-s str_1))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(os.path.join('sudo apt-get update'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
379-10487278

original snippet: 
my_dict.update({'third_key': 1})
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id first))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg) (expr-value (Dict (expr*-keys (Str (string-s str_0))) (expr*-values (Str (string-s str_2))))))))))))
predicted code: 
first(**{'third_key': 'str_2'})
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
380-10487278

original snippet: 
my_list = []
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id np))) (identifier-attr array))) (expr*-args (List (expr*-elts (Name (identifier-id declarar)) (Name (identifier-id b))))) (keyword*-keywords))))))
predicted code: 
np.array([declarar, b])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
381-10487278

original snippet: 
my_list.append(12)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id listastr_1))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id requests))) (identifier-attr post))) (expr*-args (Name (identifier-id listastr_1))) (keyword*-keywords (keyword (identifier?-arg data) (expr-value (Name (identifier-id str_0))))))))))
predicted code: 
listastr_1 = requests.post(listastr_1, data=12)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
382-10155684

original snippet: 
myList.insert(0, 'wuggah')
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr join))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
myList = ''.join(myList)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
383-3519125

original snippet: 
"""\\xF3\\xBE\\x80\\x80""".replace('\\x', '').decode('hex')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id int))) (expr*-args (Call (expr-func (Attribute (expr-value (Str (string-s 
))) (identifier-attr format))) (expr*-args (Name (identifier-id reales))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
int('\n'.format(reales))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
384-40144769

original snippet: 
df[df.columns[-1]]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (Str (string-s var_0))))))) (expr-value (Str (string-s var_0))))))
predicted code: 
df['df'] = 'df'
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
385-30787901

original snippet: 
df.loc[df['Letters'] == 'C', 'Letters'].values[0]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr groupby))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr size))) (expr*-args) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 0))))))))))
predicted code: 
df.groupby('letras').size()[0]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
386-18730044

original snippet: 
np.column_stack(([1, 2, 3], [4, 5, 6]))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (ListComp (expr-elt (Name (identifier-id i))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Call (expr-func (Name (identifier-id range))) (expr*-args (Num (object-n 10))) (keyword*-keywords))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
print([i for i in range(10)])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
387-402504

original snippet: 
type(i)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Attribute (expr-value (Name (identifier-id str))) (identifier-attr lower))))))))))
predicted code: 
sorted(I, key=str.lower)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
388-402504

original snippet: 
type(v)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr upper))))))))))
predicted code: 
sorted(V, key=V.upper)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
389-402504

original snippet: 
type(v)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr upper))))))))))
predicted code: 
sorted(V, key=V.upper)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
390-402504

original snippet: 
type(v)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr upper))))))))))
predicted code: 
sorted(V, key=V.upper)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
391-402504

original snippet: 
type(v)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr upper))))))))))
predicted code: 
sorted(V, key=V.upper)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
392-402504

original snippet: 
print(type(variable_name))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr values))) (keyword*-keywords))))))
predicted code: 
print(variable_name.values)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
393-2300756

original snippet: 
next(itertools.islice(range(10), 5, 5 + 1))
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id f))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id random))) (identifier-attr choice))) (expr*-args (Name (identifier-id quinto))) (keyword*-keywords))))))
predicted code: 
f = random.choice(quinto)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
394-20056548

original snippet: 
print('"{}"'.format(word))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Str (string-s var_0))) (identifier-attr decode))) (expr*-args (Str (string-s unicode-escape))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print('word'.decode('unicode-escape'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
395-8546245

original snippet: 
""" """.join(list)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr split))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
list = list(list.split())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
396-2276416

original snippet: 
y = [[] for n in range(2)]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Name (identifier-id list))) (expr*-args (Name (identifier-id i))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Call (expr-func (Name (identifier-id zip))) (expr*-args (Starred (expr-value (Name (identifier-id l))))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[list(i) for i in zip(*l)]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
397-3925614

original snippet: 
data = [line.strip() for line in open('C:/name/MyDocuments/numbers', 'r')]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Attribute (expr-value (Name (identifier-id c))) (identifier-attr isdigit))) (expr*-args) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id line))) (expr-iter (Call (expr-func (Name (identifier-id open))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[c.isdigit() for line in open(data)]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
398-22187233

original snippet: 
"""""".join([char for char in 'it is icy' if char != 'i'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s -SPACE-))) (identifier-attr join))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id str_1))) (identifier-attr split))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
""" """.join(Es helada.split('i'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
399-22187233

original snippet: 
re.sub('i', '', 'it is icy')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s -SPACE-))) (identifier-attr join))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id str_1))) (identifier-attr split))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
""" """.join(es helada.split())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
400-22187233

original snippet: 
"""it is icy""".replace('i', '')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id str_1))) (identifier-attr dropna))) (expr*-args) (keyword*-keywords))))))
predicted code: 
Es helada.dropna()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
401-13413590

original snippet: 
df.dropna(subset=[1])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr groupby))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg level) (expr-value (Str (string-s str_0))))))) (identifier-attr to_csv))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
df.groupby(level='1').to_csv('1')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
402-598398

original snippet: 
[x for x in myList if x.n == 30]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id set))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (identifier-attr reshape))) (expr*-args (Subscript (expr-value (Name (identifier-id value))) (slice-slice (Slice (expr?-lower) (expr?-upper) (expr?-step (UnaryOp (unaryop-op (USub)) (expr-operand (Num (object-n 1))))))))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Tuple (expr*-elts (Name (identifier-id i)) (Name (identifier-id b))))) (expr-iter (Call (expr-func (Name (identifier-id enumerate))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[set(myList).reshape(value[::-1]) for i, b in enumerate(myList)]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
403-10351772

original snippet: 
nums = [int(x) for x in intstringlist]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (List (expr*-elts (Str (string-s I-SPACE-Hello)) (Str (string-s b)) (Str (string-s c))))) (keyword*-keywords))))))
predicted code: 
print(['I Hello', 'b', 'c'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
404-10351772

original snippet: 
map(int, eval(input('Enter the unfriendly numbers: ')))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Call (expr-func (Attribute (expr-value (Str (string-s ))) (identifier-attr join))) (expr*-args (Name (identifier-id i))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id text))) (identifier-attr split))) (expr*-args) (keyword*-keywords))) (expr*-ifs))))))))
predicted code: 
[''.join(i) for i in text.split()]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
405-493386

original snippet: 
sys.stdout.write('.')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Name (identifier-id round))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(round())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
406-6569528

original snippet: 
int(round(2.51 * 100))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id eval))) (expr*-args (Str (string-s A))) (keyword*-keywords))))))
predicted code: 
eval('A')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
407-3964681

original snippet: 
os.chdir('/mydir')
for file in glob.glob('*.txt'):
    pass
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id os))) (identifier-attr path))) (identifier-attr urlretrieve))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
os.path.urlretrieve('/ mydir')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
408-3964681

original snippet: 
for file in os.listdir('/mydir'):
    if file.endswith('.txt'):
        pass
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id os))) (identifier-attr path))) (identifier-attr urlretrieve))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
os.path.urlretrieve('/ mydir')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
409-3964681

original snippet: 
for (root, dirs, files) in os.walk('/mydir'):
    for file in files:
        if file.endswith('.txt'):
            pass
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id os))) (identifier-attr path))) (identifier-attr urlretrieve))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
os.path.urlretrieve('/ mydir')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
410-20865487

original snippet: 
df.plot(legend=False)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr groupby))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg) (expr-value (Str (string-s str_0)))) (keyword (identifier?-arg) (expr-value (Str (string-s str_0))))))))))
predicted code: 
df.groupby(**'str_0', **'str_0')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
411-13368659

original snippet: 
for i in range(256):
    for j in range(256):
        ip = ('192.168.%d.%d' % (i, j))
        print(ip)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id exec))) (expr*-args (Call (expr-func (Name (identifier-id float))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr compile))) (expr*-args (Str (string-s bucle))) (keyword*-keywords))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
exec(float(re.compile('bucle')))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
412-13368659

original snippet: 
for (i, j) in product(list(range(256)), list(range(256))):
    pass
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id exec))) (expr*-args (Call (expr-func (Name (identifier-id float))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr compile))) (expr*-args (Str (string-s bucle))) (keyword*-keywords))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
exec(float(re.compile('bucle')))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
413-13368659

original snippet: 
generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id exec))) (expr*-args (Call (expr-func (Name (identifier-id float))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr compile))) (expr*-args (Str (string-s bucle))) (keyword*-keywords))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
exec(float(re.compile('bucle')))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
414-4065737

original snippet: 
sum(1 << i for i, b in enumerate(x) if b)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sum))) (expr*-args (GeneratorExp (expr-elt (BinOp (expr-left (Name (identifier-id x))) (operator-op (Mult)) (expr-right (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (Name (identifier-id i))))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
sum(x * x[i] for i in x)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
415-8691311

original snippet: 
target.write('%r\n%r\n%r\n' % (line1, line2, line3))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr decode))) (expr*-args (Str (string-s %Y-%m-%d))) (keyword*-keywords))))))
predicted code: 
line1.decode('%Y-%m-%d')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
416-10632111

original snippet: 
[y for x in data for y in (x if isinstance(x, list) else [x])]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Name (identifier-id i))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id i))) (expr-iter (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id var_0)) (Name (identifier-id b))) (keyword*-keywords))) (expr*-ifs)) (comprehension (expr-target (Name (identifier-id j))) (expr-iter (Name (identifier-id i))) (expr*-ifs))))))))
predicted code: 
[i for i in zip(data, b) for j in i]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
417-15392730

original snippet: 
print('foo\nbar'.encode('string_escape'))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id line))) (identifier-attr decode))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr decode))) (expr*-args (Str (string-s *))) (keyword*-keywords))))))
predicted code: 
line.decode("\\ n 'en una cadena").decode('*')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
418-1010961

original snippet: 
"""""".join(s.rsplit(',', 1))
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr replace))) (expr*-args (Str (string-s )) (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
s = s.replace('', '')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
419-23855976

original snippet: 
(x[1:] + x[:-1]) / 2
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id np))) (identifier-attr isnan))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (identifier-attr mean))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(np.isnan(x).mean())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
420-23855976

original snippet: 
x[:-1] + (x[1:] - x[:-1]) / 2
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id max))) (expr*-args (Name (identifier-id b))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id operator))) (identifier-attr itemgetter))) (expr*-args (Num (object-n 1)) (Num (object-n 2))) (keyword*-keywords)))) (keyword (identifier?-arg axis) (expr-value (Num (object-n 0))))))))))
predicted code: 
max(b, key=operator.itemgetter(1, 2), axis=0)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
421-6375343

original snippet: 
arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id np))) (identifier-attr array))) (expr*-args (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr shape))) (expr*-args (Name (identifier-id str_0))) (keyword*-keywords))) (keyword*-keywords))) (keyword*-keywords (keyword (identifier?-arg dtype) (expr-value (Name (identifier-id int))))))) (keyword*-keywords))))))
predicted code: 
print(np.array(list(arr.shape(de archivo)), dtype=int))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
422-1547733

original snippet: 
l = sorted(l, key=itemgetter('time'), reverse=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Attribute (expr-value (Name (identifier-id x))) (identifier-attr str_0))))))))))))
predicted code: 
sorted(L, key=lambda x: x.tiempo)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
423-1547733

original snippet: 
l = sorted(l, key=lambda a: a['time'], reverse=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr get)))) (keyword (identifier?-arg reverse) (expr-value (NameConstant (singleton-value True))))))))))
predicted code: 
sorted(L, key=L.get, reverse='True')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
424-37080612

original snippet: 
df.loc[df[0].str.contains('(Hel|Just)')]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr groupby))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (slice-slice (Index (expr-value (Num (object-n 0))))))))))
predicted code: 
df.groupby('(Hel | Justo)')[0]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
425-14716342

original snippet: 
re.search('\\[(.*)\\]', your_string).group(1)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s str_0)) (Str (string-s rb))) (keyword*-keywords))) (identifier-attr hexdigest))) (expr*-args) (keyword*-keywords))))))
predicted code: 
open('[', 'rb').hexdigest()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
426-1666700

original snippet: 
"""The big brown fox is brown""".count('brown')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Str (string-s -SPACE-Hello))) (identifier-attr join))) (expr*-args (GeneratorExp (expr-elt (Call (expr-func (Name (identifier-id str))) (expr*-args (Name (identifier-id x))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id x))) (expr-iter (Str (string-s producido))) (expr*-ifs))))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(' Hello'.join(str(x) for x in 'producido'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
427-18979111

original snippet: 
json.loads(request.body)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id json))) (identifier-attr parse))) (expr*-args (Str (string-s str_0)) (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
json.parse('request.body', 'request.body')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
428-7243750

original snippet: 
urllib.request.urlretrieve(url, file_name)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id url))) (identifier-attr open))) (expr*-args (Str (string-s var_0))) (keyword*-keywords))))))
predicted code: 
url.open('url')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
429-743806

original snippet: 
text.split()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr split))) (expr*-args (Str (string-s var_0)) (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
re.split('Text', Text)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
430-743806

original snippet: 
text.split(',')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr split))) (expr*-args (Str (string-s ,))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(Text.split(','))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
431-743806

original snippet: 
line.split()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr split))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
list(line.split())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
432-35044115

original snippet: 
[re.sub('(?<!\\d)\\.(?!\\d)', ' ', i) for i in s]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id str_0))) (identifier-attr replace))) (expr*-args (Str (string-s str_0)) (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
asociado con letras ASCII en la lista `S 'con el espacio.replace(
    "asociado con letras ASCII en la lista `S 'con el espacio",
    "asociado con letras ASCII en la lista `S 'con el espacio")
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
433-38388799

original snippet: 
sorted(list_of_strings, key=lambda s: s.split(',')[1])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr sort))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Subscript (expr-value (Name (identifier-id x))) (slice-slice (Index (expr-value (Num (object-n 0)))))))))) (keyword (identifier?-arg reverse) (expr-value (NameConstant (singleton-value True))))))))))
predicted code: 
list_of_strings.sort(key=lambda x: x[0], reverse='True')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
434-9609375

original snippet: 
subprocess.check_call('vasp | tee tee_output', shell=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id self))) (identifier-attr request))) (identifier-attr get))) (expr*-args (Str (string-s tee_output)) (Str (string-s tee_output))) (keyword*-keywords))))))
predicted code: 
self.request.get('tee_output', 'tee_output')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
435-37004138

original snippet: 
[element for element in lst if isinstance(element, int)]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (ListComp (expr-elt (Call (expr-func (Attribute (expr-value (Name (identifier-id s))) (identifier-attr split))) (expr*-args (Str (string-s :))) (keyword*-keywords))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id s))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
lst = list([s.split(':') for s in lst])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
436-37004138

original snippet: 
[element for element in lst if not isinstance(element, str)]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id df))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id numpy))) (identifier-attr array))) (expr*-args (List (expr*-elts (Name (identifier-id str_0))))) (keyword*-keywords (keyword (identifier?-arg repeat) (expr-value (Name (identifier-id df2))))))))))
predicted code: 
df = numpy.array([LST], repeat=df2)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
437-72899

original snippet: 
newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr sort))) (expr*-args) (keyword*-keywords (keyword (identifier?-arg) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id operator))) (identifier-attr itemgetter))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))))))
predicted code: 
list_to_be_sorted.sort(**operator.itemgetter('name'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
438-72899

original snippet: 
newlist = sorted(l, key=itemgetter('name'), reverse=True)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Call (expr-func (Name (identifier-id list))) (expr*-args (Subscript (expr-value (Name (identifier-id x))) (slice-slice (Index (expr-value (Num (object-n 0))))))) (keyword*-keywords))))))))))))
predicted code: 
sorted(L, key=lambda x: list(x[0]))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
439-29881993

original snippet: 
""",""".join(trans['category'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id dict))) (expr*-args (GeneratorExp (expr-elt (Tuple (expr*-elts (Name (identifier-id key)) (Name (identifier-id value))))) (comprehension*-generators (comprehension (expr-target (Tuple (expr*-elts (Name (identifier-id k)) (Name (identifier-id v))))) (expr-iter (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr items))) (expr*-args) (keyword*-keywords))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
dict((key, value) for k, v in trans.items())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
440-34158494

original snippet: 
"""""".join(['A', 'B', 'C', 'D'])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Str (string-s np))) (identifier-attr format))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
"""np""".format("[ 'A', 'B', 'C', 'D']")
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
441-7750557

original snippet: 
json.load(urllib.request.urlopen('url'))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id json))) (identifier-attr loads))) (expr*-args (BinOp (expr-left (Call (expr-func (Name (identifier-id max))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id json))) (identifier-attr query))) (expr*-args (Name (identifier-id str_0))) (keyword*-keywords))) (keyword*-keywords))) (operator-op (Sub)) (expr-right (Num (object-n 100))))) (keyword*-keywords))))))
predicted code: 
json.loads(max(json.query(url)) - 100)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
442-12666897

original snippet: 
[x for x in sents if not x.startswith('@$\t') and not x.startswith('#')]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Name (identifier-id var_0))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id s))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs (Compare (expr-left (Str (string-s a))) (cmpop*-ops (In)) (expr*-comparators (Name (identifier-id k))))))))))))
predicted code: 
[sents for s in sents if 'a' in k]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
443-2984751

original snippet: 
Entry.objects.filter(pub_date__contains='08:00')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id request))) (identifier-attr POST))) (identifier-attr get))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
request.POST.get('str_0')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
444-5944630

original snippet: 
list.sort(key=lambda item: (item['points'], item['time']))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Subscript (expr-value (Name (identifier-id x))) (slice-slice (Index (expr-value (Num (object-n 1))))))))))))))))
predicted code: 
sorted(list, key=lambda x: x[1])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
445-7852855

original snippet: 
(t - datetime.datetime(1970, 1, 1)).total_seconds()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id datetime))) (identifier-attr datetime))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
datetime.datetime('(1970, 1, 1)')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
446-2763750

original snippet: 
re.sub('(\\_a)?\\.([^\\.]*)$', '_suff.\\2', 'long.file.name.jpg')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id getattr))) (expr*-args (Call (expr-func (Attribute (expr-value (Call (expr-func (Name (identifier-id set))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (identifier-attr insert))) (expr*-args (Num (object-n 0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
getattr(set(_suff).insert(0))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
447-6420361

original snippet: 
import imp
imp.reload(module)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id exec))) (expr*-args (Call (expr-func (Name (identifier-id bool))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
exec(bool(module))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
448-19546911

original snippet: 
struct.unpack('H', struct.pack('h', number))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id int))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
int(number)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
449-9746522

original snippet: 
numlist = [float(x) for x in numlist]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (UnaryOp (unaryop-op (USub)) (expr-operand (Num (object-n 1))))))))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id tup))) (expr-iter (Name (identifier-id var_0))) (expr*-ifs))))))))
predicted code: 
[numlist[-1] for tup in numlist]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
450-20107570

original snippet: 
df.to_csv(filename, index=False)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr set_index))) (expr*-args (Str (string-s exclusión))) (keyword*-keywords))))))
predicted code: 
df = df.set_index('exclusión')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
451-8740353

original snippet: 
json_data = json.loads(unescaped)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id getattr))) (expr*-args (Name (identifier-id var_0)) (Call (expr-func (Attribute (expr-value (Name (identifier-id str_0))) (identifier-attr upper))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
getattr(unescaped, json_data.upper())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
452-5891453

original snippet: 
[chr(i) for i in range(127)]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s ascii))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
list(open('ascii'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
453-18367007

original snippet: 
newFile.write(struct.pack('5B', *newFileBytes))
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id f))) (expr-value (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s var_0))) (keyword*-keywords))))))
predicted code: 
f = open('newFileBytes')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
454-21805490

original snippet: 
re.sub('^[A-Z0-9]*(?![a-z])', '', string)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id soup))) (identifier-attr find_all))) (expr*-args (Str (string-s a))) (keyword*-keywords))))))
predicted code: 
soup.find_all('a')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
455-16125229

original snippet: 
list(dict.keys())[-1]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr values))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
dict = list(dict.values())
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
456-6159900

original snippet: 
print('hi there', file=f)
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id f))) (expr-value (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s var_0))) (keyword*-keywords))))))
predicted code: 
f = open('F')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
457-6159900

original snippet: 
f = open('myfile', 'w')
f.write('hi there\n')
f.close()
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id f))) (expr-value (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s var_0))) (keyword*-keywords))))))
predicted code: 
f = open('myfile')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
458-6159900

original snippet: 
with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id f))) (expr-value (Call (expr-func (Name (identifier-id file))) (expr*-args (Str (string-s str_1))) (keyword*-keywords))))))
predicted code: 
f = file('somefile.txt')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
459-19527279

original snippet: 
s.encode('iso-8859-15')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr encode))) (expr*-args (Str (string-s utf8))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(s.encode('utf8'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
460-10668585

original snippet: 
AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Index (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr POST))) (identifier-attr get))) (expr*-args (Str (string-s str_0))) (keyword*-keywords (keyword (identifier?-arg inplace) (expr-value (NameConstant (singleton-value True))))))))))))))
predicted code: 
AuthorizedEmail[AuthorizedEmail.POST.get('aÃ±adido', inplace='True')]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
461-356483

original snippet: 
re.findall('Test([0-9.]*[0-9]+)', text)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id str_0))) (identifier-attr split))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(usando expresiones regulares Text.split(
    'usando expresiones regulares Text'))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
462-356483

original snippet: 
re.findall('Test([\\d.]*\\d+)', text)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr compile))) (expr*-args (Str (string-s str_0))) (keyword*-keywords))) (identifier-attr group))) (expr*-args (Num (object-n 1))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(re.compile('texto').group(1))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
463-38081866

original snippet: 
os.system('powershell.exe', 'script.ps1')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id subprocess))) (identifier-attr call))) (expr*-args (List (expr*-elts (Str (string-s shutdown)) (Str (string-s str_0)) (Str (string-s str_0))))) (keyword*-keywords))))))
predicted code: 
subprocess.call(['shutdown', 'script.ps1', 'script.ps1'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
464-7349646

original snippet: 
b.sort(key=lambda x: x[1][2])
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sorted))) (expr*-args (List (expr*-elts (Str (string-s 3)) (Str (string-s 3)) (Str (string-s 3))))) (keyword*-keywords))))))
predicted code: 
sorted(['3', '3', '3'])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
465-2430539

original snippet: 
list(cf.get_range().get_keys())
predicted ast: 
(Module (stmt*-body (Expr (expr-value (ListComp (expr-elt (Name (identifier-id k))) (comprehension*-generators (comprehension (expr-target (Name (identifier-id d))) (expr-iter (Call (expr-func (Name (identifier-id list))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr values))) (expr*-args) (keyword*-keywords))) (keyword*-keywords))) (expr*-ifs (Name (identifier-id isfile))))))))))
predicted code: 
[k for d in list(cf.values()) if isfile]
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
466-10607688

original snippet: 
datetime.datetime.now()
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Attribute (expr-value (Name (identifier-id datetime))) (identifier-attr datetime))) (identifier-attr now))) (expr*-args) (keyword*-keywords))))))
predicted code: 
datetime.datetime.now()
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
467-30843103

original snippet: 
next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id max))) (expr*-args (Name (identifier-id listastr_1))) (keyword*-keywords (keyword (identifier?-arg key) (expr-value (Lambda (arguments-args (arguments (arg*-args (arg (identifier-arg x) (expr?-annotation))) (arg?-vararg) (arg*-kwonlyargs) (expr*-kw_defaults) (arg?-kwarg) (expr*-defaults))) (expr-body (Subscript (expr-value (Name (identifier-id x))) (slice-slice (Slice (expr?-lower (Num (object-n 1))) (expr?-upper) (expr?-step))))))))))))))
predicted code: 
max(listastr_1, key=lambda x: x[1:])
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
468-4918425

original snippet: 
a[:] = [(x - 13) for x in a]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr remove))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))))))
predicted code: 
a.remove(a)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
469-701402

original snippet: 
random.choice(os.listdir('C:\\'))
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id os))) (identifier-attr chdir))) (expr*-args (Str (string-s path))) (keyword*-keywords))))))
predicted code: 
os.chdir('path')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
470-17794266

original snippet: 
max(x.min(), x.max(), key=abs)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id print))) (expr*-args (Call (expr-func (Attribute (expr-value (Name (identifier-id numpy))) (identifier-attr where))) (expr*-args (Call (expr-func (Name (identifier-id enumerate))) (expr*-args (Name (identifier-id var_0))) (keyword*-keywords))) (keyword*-keywords))) (keyword*-keywords))))))
predicted code: 
print(numpy.where(enumerate(x)))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
471-30551576

original snippet: 
re.findall('"(http.*?)"', s, re.MULTILINE | re.DOTALL)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Attribute (expr-value (Name (identifier-id var_0))) (identifier-attr url))))))
predicted code: 
s.url
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
472-30551576

original snippet: 
re.findall('http://[^t][^s"]+\\.html', document)
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id re))) (identifier-attr split))) (expr*-args (Str (string-s inicia)) (Str (string-s str_0))) (keyword*-keywords))))))
predicted code: 
re.split('inicia', '')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
473-113534

original snippet: 
mystring.replace(' ', '! !').split('!')
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Attribute (expr-value (Call (expr-func (Attribute (expr-value (Name (identifier-id s))) (identifier-attr replace))) (expr*-args (Str (string-s str_0)) (Str (string-s ))) (keyword*-keywords))) (identifier-attr group))) (expr*-args (Num (object-n 1))) (keyword*-keywords))))))
predicted code: 
s.replace('', '').group(1)
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
474-5838735

original snippet: 
open(path, 'r')
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id f))) (expr-value (Call (expr-func (Name (identifier-id open))) (expr*-args (Str (string-s var_0))) (keyword*-keywords))))))
predicted code: 
f = open('path')
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
475-36003967

original snippet: 
[[sum(item) for item in zip(*items)] for items in zip(*data)]
predicted ast: 
(Module (stmt*-body (Expr (expr-value (Call (expr-func (Name (identifier-id sum))) (expr*-args (GeneratorExp (expr-elt (BinOp (expr-left (Name (identifier-id i))) (operator-op (Mult)) (expr-right (Name (identifier-id j))))) (comprehension*-generators (comprehension (expr-target (Tuple (expr*-elts (Name (identifier-id i)) (Name (identifier-id j))))) (expr-iter (Call (expr-func (Name (identifier-id zip))) (expr*-args (Name (identifier-id var_0)) (Name (identifier-id b))) (keyword*-keywords))) (expr*-ifs))))) (keyword*-keywords))))))
predicted code: 
sum(i * j for i, j in zip(data, b))
------------------------------------------------------------
------------------------------------------------------------
number and example_id: 
476-7635237

original snippet: 
a[:, (np.newaxis)]
predicted ast: 
(Module (stmt*-body (Assign (expr*-targets (Name (identifier-id var_0))) (expr-value (Subscript (expr-value (Name (identifier-id var_0))) (slice-slice (Slice (expr?-lower) (expr?-upper) (expr?-step))))))))
predicted code: 
a = a[:]
------------------------------------------------------------
